// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.gtoi_importbp_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: GToI_ImportBP Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class GToI_ImportBP implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "GToI_ImportBP";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					GToI_ImportBP.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(GToI_ImportBP.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tAccessInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAccessInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAccessInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAccessInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAccessInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAccessInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAccessInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAccessInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAccessInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class insert_bpStruct implements
			routines.system.IPersistableRow<insert_bpStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_GToI_ImportBP = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public double i_bpartner_id;

		public double getI_bpartner_id() {
			return this.i_bpartner_id;
		}

		public Double ad_client_id;

		public Double getAd_client_id() {
			return this.ad_client_id;
		}

		public Double ad_org_id;

		public Double getAd_org_id() {
			return this.ad_org_id;
		}

		public String isactive;

		public String getIsactive() {
			return this.isactive;
		}

		public java.util.Date created;

		public java.util.Date getCreated() {
			return this.created;
		}

		public Double createdby;

		public Double getCreatedby() {
			return this.createdby;
		}

		public java.util.Date updated;

		public java.util.Date getUpdated() {
			return this.updated;
		}

		public Double updatedby;

		public Double getUpdatedby() {
			return this.updatedby;
		}

		public String i_isimported;

		public String getI_isimported() {
			return this.i_isimported;
		}

		public String i_errormsg;

		public String getI_errormsg() {
			return this.i_errormsg;
		}

		public Double c_bpartner_id;

		public Double getC_bpartner_id() {
			return this.c_bpartner_id;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String name2;

		public String getName2() {
			return this.name2;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String duns;

		public String getDuns() {
			return this.duns;
		}

		public String taxid;

		public String getTaxid() {
			return this.taxid;
		}

		public String naics;

		public String getNaics() {
			return this.naics;
		}

		public String groupvalue;

		public String getGroupvalue() {
			return this.groupvalue;
		}

		public Double c_bp_group_id;

		public Double getC_bp_group_id() {
			return this.c_bp_group_id;
		}

		public Double c_bpartner_location_id;

		public Double getC_bpartner_location_id() {
			return this.c_bpartner_location_id;
		}

		public String address1;

		public String getAddress1() {
			return this.address1;
		}

		public String address2;

		public String getAddress2() {
			return this.address2;
		}

		public String postal;

		public String getPostal() {
			return this.postal;
		}

		public String postal_add;

		public String getPostal_add() {
			return this.postal_add;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public Double c_region_id;

		public Double getC_region_id() {
			return this.c_region_id;
		}

		public String regionname;

		public String getRegionname() {
			return this.regionname;
		}

		public Double c_country_id;

		public Double getC_country_id() {
			return this.c_country_id;
		}

		public String countrycode;

		public String getCountrycode() {
			return this.countrycode;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String contactname;

		public String getContactname() {
			return this.contactname;
		}

		public String contactdescription;

		public String getContactdescription() {
			return this.contactdescription;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		public String phone;

		public String getPhone() {
			return this.phone;
		}

		public String phone2;

		public String getPhone2() {
			return this.phone2;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public java.util.Date birthday;

		public java.util.Date getBirthday() {
			return this.birthday;
		}

		public Double c_greeting_id;

		public Double getC_greeting_id() {
			return this.c_greeting_id;
		}

		public String bpcontactgreeting;

		public String getBpcontactgreeting() {
			return this.bpcontactgreeting;
		}

		public String processing;

		public String getProcessing() {
			return this.processing;
		}

		public String processed;

		public String getProcessed() {
			return this.processed;
		}

		public Double ad_user_id;

		public Double getAd_user_id() {
			return this.ad_user_id;
		}

		public Double r_interestarea_id;

		public Double getR_interestarea_id() {
			return this.r_interestarea_id;
		}

		public String interestareaname;

		public String getInterestareaname() {
			return this.interestareaname;
		}

		public String iscustomer;

		public String getIscustomer() {
			return this.iscustomer;
		}

		public String isemployee;

		public String getIsemployee() {
			return this.isemployee;
		}

		public String isvendor;

		public String getIsvendor() {
			return this.isvendor;
		}

		public Double i_bpartner_uu;

		public Double getI_bpartner_uu() {
			return this.i_bpartner_uu;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.i_bpartner_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final insert_bpStruct other = (insert_bpStruct) obj;

			if (this.i_bpartner_id != other.i_bpartner_id)
				return false;

			return true;
		}

		public void copyDataTo(insert_bpStruct other) {

			other.i_bpartner_id = this.i_bpartner_id;
			other.ad_client_id = this.ad_client_id;
			other.ad_org_id = this.ad_org_id;
			other.isactive = this.isactive;
			other.created = this.created;
			other.createdby = this.createdby;
			other.updated = this.updated;
			other.updatedby = this.updatedby;
			other.i_isimported = this.i_isimported;
			other.i_errormsg = this.i_errormsg;
			other.c_bpartner_id = this.c_bpartner_id;
			other.value = this.value;
			other.name = this.name;
			other.name2 = this.name2;
			other.description = this.description;
			other.duns = this.duns;
			other.taxid = this.taxid;
			other.naics = this.naics;
			other.groupvalue = this.groupvalue;
			other.c_bp_group_id = this.c_bp_group_id;
			other.c_bpartner_location_id = this.c_bpartner_location_id;
			other.address1 = this.address1;
			other.address2 = this.address2;
			other.postal = this.postal;
			other.postal_add = this.postal_add;
			other.city = this.city;
			other.c_region_id = this.c_region_id;
			other.regionname = this.regionname;
			other.c_country_id = this.c_country_id;
			other.countrycode = this.countrycode;
			other.title = this.title;
			other.contactname = this.contactname;
			other.contactdescription = this.contactdescription;
			other.comments = this.comments;
			other.phone = this.phone;
			other.phone2 = this.phone2;
			other.fax = this.fax;
			other.email = this.email;
			other.password = this.password;
			other.birthday = this.birthday;
			other.c_greeting_id = this.c_greeting_id;
			other.bpcontactgreeting = this.bpcontactgreeting;
			other.processing = this.processing;
			other.processed = this.processed;
			other.ad_user_id = this.ad_user_id;
			other.r_interestarea_id = this.r_interestarea_id;
			other.interestareaname = this.interestareaname;
			other.iscustomer = this.iscustomer;
			other.isemployee = this.isemployee;
			other.isvendor = this.isvendor;
			other.i_bpartner_uu = this.i_bpartner_uu;

		}

		public void copyKeysDataTo(insert_bpStruct other) {

			other.i_bpartner_id = this.i_bpartner_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_GToI_ImportBP.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_GToI_ImportBP.length == 0) {
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_GToI_ImportBP, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_GToI_ImportBP) {

				try {

					int length = 0;

					this.i_bpartner_id = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.ad_client_id = null;
					} else {
						this.ad_client_id = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ad_org_id = null;
					} else {
						this.ad_org_id = dis.readDouble();
					}

					this.isactive = readString(dis);

					this.created = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.createdby = null;
					} else {
						this.createdby = dis.readDouble();
					}

					this.updated = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.updatedby = null;
					} else {
						this.updatedby = dis.readDouble();
					}

					this.i_isimported = readString(dis);

					this.i_errormsg = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.c_bpartner_id = null;
					} else {
						this.c_bpartner_id = dis.readDouble();
					}

					this.value = readString(dis);

					this.name = readString(dis);

					this.name2 = readString(dis);

					this.description = readString(dis);

					this.duns = readString(dis);

					this.taxid = readString(dis);

					this.naics = readString(dis);

					this.groupvalue = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.c_bp_group_id = null;
					} else {
						this.c_bp_group_id = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.c_bpartner_location_id = null;
					} else {
						this.c_bpartner_location_id = dis.readDouble();
					}

					this.address1 = readString(dis);

					this.address2 = readString(dis);

					this.postal = readString(dis);

					this.postal_add = readString(dis);

					this.city = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.c_region_id = null;
					} else {
						this.c_region_id = dis.readDouble();
					}

					this.regionname = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.c_country_id = null;
					} else {
						this.c_country_id = dis.readDouble();
					}

					this.countrycode = readString(dis);

					this.title = readString(dis);

					this.contactname = readString(dis);

					this.contactdescription = readString(dis);

					this.comments = readString(dis);

					this.phone = readString(dis);

					this.phone2 = readString(dis);

					this.fax = readString(dis);

					this.email = readString(dis);

					this.password = readString(dis);

					this.birthday = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.c_greeting_id = null;
					} else {
						this.c_greeting_id = dis.readDouble();
					}

					this.bpcontactgreeting = readString(dis);

					this.processing = readString(dis);

					this.processed = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ad_user_id = null;
					} else {
						this.ad_user_id = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.r_interestarea_id = null;
					} else {
						this.r_interestarea_id = dis.readDouble();
					}

					this.interestareaname = readString(dis);

					this.iscustomer = readString(dis);

					this.isemployee = readString(dis);

					this.isvendor = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.i_bpartner_uu = null;
					} else {
						this.i_bpartner_uu = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.i_bpartner_id);

				// Double

				if (this.ad_client_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ad_client_id);
				}

				// Double

				if (this.ad_org_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ad_org_id);
				}

				// String

				writeString(this.isactive, dos);

				// java.util.Date

				writeDate(this.created, dos);

				// Double

				if (this.createdby == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.createdby);
				}

				// java.util.Date

				writeDate(this.updated, dos);

				// Double

				if (this.updatedby == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.updatedby);
				}

				// String

				writeString(this.i_isimported, dos);

				// String

				writeString(this.i_errormsg, dos);

				// Double

				if (this.c_bpartner_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.c_bpartner_id);
				}

				// String

				writeString(this.value, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.name2, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.duns, dos);

				// String

				writeString(this.taxid, dos);

				// String

				writeString(this.naics, dos);

				// String

				writeString(this.groupvalue, dos);

				// Double

				if (this.c_bp_group_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.c_bp_group_id);
				}

				// Double

				if (this.c_bpartner_location_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.c_bpartner_location_id);
				}

				// String

				writeString(this.address1, dos);

				// String

				writeString(this.address2, dos);

				// String

				writeString(this.postal, dos);

				// String

				writeString(this.postal_add, dos);

				// String

				writeString(this.city, dos);

				// Double

				if (this.c_region_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.c_region_id);
				}

				// String

				writeString(this.regionname, dos);

				// Double

				if (this.c_country_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.c_country_id);
				}

				// String

				writeString(this.countrycode, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.contactname, dos);

				// String

				writeString(this.contactdescription, dos);

				// String

				writeString(this.comments, dos);

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.phone2, dos);

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.password, dos);

				// java.util.Date

				writeDate(this.birthday, dos);

				// Double

				if (this.c_greeting_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.c_greeting_id);
				}

				// String

				writeString(this.bpcontactgreeting, dos);

				// String

				writeString(this.processing, dos);

				// String

				writeString(this.processed, dos);

				// Double

				if (this.ad_user_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ad_user_id);
				}

				// Double

				if (this.r_interestarea_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.r_interestarea_id);
				}

				// String

				writeString(this.interestareaname, dos);

				// String

				writeString(this.iscustomer, dos);

				// String

				writeString(this.isemployee, dos);

				// String

				writeString(this.isvendor, dos);

				// Double

				if (this.i_bpartner_uu == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.i_bpartner_uu);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("i_bpartner_id=" + String.valueOf(i_bpartner_id));
			sb.append(",ad_client_id=" + String.valueOf(ad_client_id));
			sb.append(",ad_org_id=" + String.valueOf(ad_org_id));
			sb.append(",isactive=" + isactive);
			sb.append(",created=" + String.valueOf(created));
			sb.append(",createdby=" + String.valueOf(createdby));
			sb.append(",updated=" + String.valueOf(updated));
			sb.append(",updatedby=" + String.valueOf(updatedby));
			sb.append(",i_isimported=" + i_isimported);
			sb.append(",i_errormsg=" + i_errormsg);
			sb.append(",c_bpartner_id=" + String.valueOf(c_bpartner_id));
			sb.append(",value=" + value);
			sb.append(",name=" + name);
			sb.append(",name2=" + name2);
			sb.append(",description=" + description);
			sb.append(",duns=" + duns);
			sb.append(",taxid=" + taxid);
			sb.append(",naics=" + naics);
			sb.append(",groupvalue=" + groupvalue);
			sb.append(",c_bp_group_id=" + String.valueOf(c_bp_group_id));
			sb.append(",c_bpartner_location_id="
					+ String.valueOf(c_bpartner_location_id));
			sb.append(",address1=" + address1);
			sb.append(",address2=" + address2);
			sb.append(",postal=" + postal);
			sb.append(",postal_add=" + postal_add);
			sb.append(",city=" + city);
			sb.append(",c_region_id=" + String.valueOf(c_region_id));
			sb.append(",regionname=" + regionname);
			sb.append(",c_country_id=" + String.valueOf(c_country_id));
			sb.append(",countrycode=" + countrycode);
			sb.append(",title=" + title);
			sb.append(",contactname=" + contactname);
			sb.append(",contactdescription=" + contactdescription);
			sb.append(",comments=" + comments);
			sb.append(",phone=" + phone);
			sb.append(",phone2=" + phone2);
			sb.append(",fax=" + fax);
			sb.append(",email=" + email);
			sb.append(",password=" + password);
			sb.append(",birthday=" + String.valueOf(birthday));
			sb.append(",c_greeting_id=" + String.valueOf(c_greeting_id));
			sb.append(",bpcontactgreeting=" + bpcontactgreeting);
			sb.append(",processing=" + processing);
			sb.append(",processed=" + processed);
			sb.append(",ad_user_id=" + String.valueOf(ad_user_id));
			sb.append(",r_interestarea_id=" + String.valueOf(r_interestarea_id));
			sb.append(",interestareaname=" + interestareaname);
			sb.append(",iscustomer=" + iscustomer);
			sb.append(",isemployee=" + isemployee);
			sb.append(",isvendor=" + isvendor);
			sb.append(",i_bpartner_uu=" + String.valueOf(i_bpartner_uu));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_bpStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.i_bpartner_id,
					other.i_bpartner_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_GToI_ImportBP = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[0];

		public String AT01CA;

		public String getAT01CA() {
			return this.AT01CA;
		}

		public String PROFCA;

		public String getPROFCA() {
			return this.PROFCA;
		}

		public Float DT01CA;

		public Float getDT01CA() {
			return this.DT01CA;
		}

		public Float DTMNCA;

		public Float getDTMNCA() {
			return this.DTMNCA;
		}

		public Float NR01CA;

		public Float getNR01CA() {
			return this.NR01CA;
		}

		public String CDDTCA;

		public String getCDDTCA() {
			return this.CDDTCA;
		}

		public String CONTCA;

		public String getCONTCA() {
			return this.CONTCA;
		}

		public String INDICA;

		public String getINDICA() {
			return this.INDICA;
		}

		public String LOCACA;

		public String getLOCACA() {
			return this.LOCACA;
		}

		public String PROVCA;

		public String getPROVCA() {
			return this.PROVCA;
		}

		public String CAPOCA;

		public String getCAPOCA() {
			return this.CAPOCA;
		}

		public String NAZICA;

		public String getNAZICA() {
			return this.NAZICA;
		}

		public String CISOCA;

		public String getCISOCA() {
			return this.CISOCA;
		}

		public String PIVACA;

		public String getPIVACA() {
			return this.PIVACA;
		}

		public String CDFICA;

		public String getCDFICA() {
			return this.CDFICA;
		}

		public String RIN3CA;

		public String getRIN3CA() {
			return this.RIN3CA;
		}

		public String RIN4CA;

		public String getRIN4CA() {
			return this.RIN4CA;
		}

		public String PEFSCA;

		public String getPEFSCA() {
			return this.PEFSCA;
		}

		public String STCFCA;

		public String getSTCFCA() {
			return this.STCFCA;
		}

		public Float DTAQCA;

		public Float getDTAQCA() {
			return this.DTAQCA;
		}

		public String CLA1CA;

		public String getCLA1CA() {
			return this.CLA1CA;
		}

		public String CLA2CA;

		public String getCLA2CA() {
			return this.CLA2CA;
		}

		public String CLA3CA;

		public String getCLA3CA() {
			return this.CLA3CA;
		}

		public String CLA4CA;

		public String getCLA4CA() {
			return this.CLA4CA;
		}

		public String CLA5CA;

		public String getCLA5CA() {
			return this.CLA5CA;
		}

		public String FLALCA;

		public String getFLALCA() {
			return this.FLALCA;
		}

		public String CDPGCA;

		public String getCDPGCA() {
			return this.CDPGCA;
		}

		public String DEBACA;

		public String getDEBACA() {
			return this.DEBACA;
		}

		public Float CABICA;

		public Float getCABICA() {
			return this.CABICA;
		}

		public Float CCABCA;

		public Float getCCABCA() {
			return this.CCABCA;
		}

		public String IBANCA;

		public String getIBANCA() {
			return this.IBANCA;
		}

		public String IDB1CA;

		public String getIDB1CA() {
			return this.IDB1CA;
		}

		public String IDB2CA;

		public String getIDB2CA() {
			return this.IDB2CA;
		}

		public String CDAGCA;

		public String getCDAGCA() {
			return this.CDAGCA;
		}

		public Float PRO1CA;

		public Float getPRO1CA() {
			return this.PRO1CA;
		}

		public Float PRO2CA;

		public Float getPRO2CA() {
			return this.PRO2CA;
		}

		public Float SCC1CA;

		public Float getSCC1CA() {
			return this.SCC1CA;
		}

		public Float SCC2CA;

		public Float getSCC2CA() {
			return this.SCC2CA;
		}

		public String FTDICA;

		public String getFTDICA() {
			return this.FTDICA;
		}

		public String CDIVCA;

		public String getCDIVCA() {
			return this.CDIVCA;
		}

		public String SPBLCA;

		public String getSPBLCA() {
			return this.SPBLCA;
		}

		public String TPLICA;

		public String getTPLICA() {
			return this.TPLICA;
		}

		public String CDLICA;

		public String getCDLICA() {
			return this.CDLICA;
		}

		public String TPGICA;

		public String getTPGICA() {
			return this.TPGICA;
		}

		public String CDLNCA;

		public String getCDLNCA() {
			return this.CDLNCA;
		}

		public String CDVACA;

		public String getCDVACA() {
			return this.CDVACA;
		}

		public Float FIDOCA;

		public Float getFIDOCA() {
			return this.FIDOCA;
		}

		public String MSPECA;

		public String getMSPECA() {
			return this.MSPECA;
		}

		public String MCONCA;

		public String getMCONCA() {
			return this.MCONCA;
		}

		public String MIMBCA;

		public String getMIMBCA() {
			return this.MIMBCA;
		}

		public String NTELCA;

		public String getNTELCA() {
			return this.NTELCA;
		}

		public String NFAXCA;

		public String getNFAXCA() {
			return this.NFAXCA;
		}

		public String INELCA;

		public String getINELCA() {
			return this.INELCA;
		}

		public String SWEBCA;

		public String getSWEBCA() {
			return this.SWEBCA;
		}

		public String NOTECA;

		public String getNOTECA() {
			return this.NOTECA;
		}

		public String CSPECA;

		public String getCSPECA() {
			return this.CSPECA;
		}

		public String CDCSCA;

		public String getCDCSCA() {
			return this.CDCSCA;
		}

		public String COAQCA;

		public String getCOAQCA() {
			return this.COAQCA;
		}

		public String CCORCA;

		public String getCCORCA() {
			return this.CCORCA;
		}

		public String CNCOCA;

		public String getCNCOCA() {
			return this.CNCOCA;
		}

		public String CAGRCA;

		public String getCAGRCA() {
			return this.CAGRCA;
		}

		public String CDSACA;

		public String getCDSACA() {
			return this.CDSACA;
		}

		public Float ABISCA;

		public Float getABISCA() {
			return this.ABISCA;
		}

		public Float CABSCA;

		public Float getCABSCA() {
			return this.CABSCA;
		}

		public String IBASCA;

		public String getIBASCA() {
			return this.IBASCA;
		}

		public String IDS1CA;

		public String getIDS1CA() {
			return this.IDS1CA;
		}

		public String IDS2CA;

		public String getIDS2CA() {
			return this.IDS2CA;
		}

		public Float GGRCCA;

		public Float getGGRCCA() {
			return this.GGRCCA;
		}

		public String FL01CA;

		public String getFL01CA() {
			return this.FL01CA;
		}

		public String FL02CA;

		public String getFL02CA() {
			return this.FL02CA;
		}

		public String FL03CA;

		public String getFL03CA() {
			return this.FL03CA;
		}

		public String FL04CA;

		public String getFL04CA() {
			return this.FL04CA;
		}

		public String FL05CA;

		public String getFL05CA() {
			return this.FL05CA;
		}

		public Float CMBECA;

		public Float getCMBECA() {
			return this.CMBECA;
		}

		public Float FIDOCA2;

		public Float getFIDOCA2() {
			return this.FIDOCA2;
		}

		public String SEQUCA;

		public String getSEQUCA() {
			return this.SEQUCA;
		}

		public String CLQUCA;

		public String getCLQUCA() {
			return this.CLQUCA;
		}

		public String DPERCA;

		public String getDPERCA() {
			return this.DPERCA;
		}

		public String TERZCA;

		public String getTERZCA() {
			return this.TERZCA;
		}

		public String CSOLCA;

		public String getCSOLCA() {
			return this.CSOLCA;
		}

		public String CSOACA;

		public String getCSOACA() {
			return this.CSOACA;
		}

		public String TIPOCA;

		public String getTIPOCA() {
			return this.TIPOCA;
		}

		public String INTECA;

		public String getINTECA() {
			return this.INTECA;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_GToI_ImportBP.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_GToI_ImportBP.length == 0) {
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_GToI_ImportBP, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_GToI_ImportBP) {

				try {

					int length = 0;

					this.AT01CA = readString(dis);

					this.PROFCA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DT01CA = null;
					} else {
						this.DT01CA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DTMNCA = null;
					} else {
						this.DTMNCA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NR01CA = null;
					} else {
						this.NR01CA = dis.readFloat();
					}

					this.CDDTCA = readString(dis);

					this.CONTCA = readString(dis);

					this.INDICA = readString(dis);

					this.LOCACA = readString(dis);

					this.PROVCA = readString(dis);

					this.CAPOCA = readString(dis);

					this.NAZICA = readString(dis);

					this.CISOCA = readString(dis);

					this.PIVACA = readString(dis);

					this.CDFICA = readString(dis);

					this.RIN3CA = readString(dis);

					this.RIN4CA = readString(dis);

					this.PEFSCA = readString(dis);

					this.STCFCA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DTAQCA = null;
					} else {
						this.DTAQCA = dis.readFloat();
					}

					this.CLA1CA = readString(dis);

					this.CLA2CA = readString(dis);

					this.CLA3CA = readString(dis);

					this.CLA4CA = readString(dis);

					this.CLA5CA = readString(dis);

					this.FLALCA = readString(dis);

					this.CDPGCA = readString(dis);

					this.DEBACA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CABICA = null;
					} else {
						this.CABICA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CCABCA = null;
					} else {
						this.CCABCA = dis.readFloat();
					}

					this.IBANCA = readString(dis);

					this.IDB1CA = readString(dis);

					this.IDB2CA = readString(dis);

					this.CDAGCA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRO1CA = null;
					} else {
						this.PRO1CA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRO2CA = null;
					} else {
						this.PRO2CA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SCC1CA = null;
					} else {
						this.SCC1CA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SCC2CA = null;
					} else {
						this.SCC2CA = dis.readFloat();
					}

					this.FTDICA = readString(dis);

					this.CDIVCA = readString(dis);

					this.SPBLCA = readString(dis);

					this.TPLICA = readString(dis);

					this.CDLICA = readString(dis);

					this.TPGICA = readString(dis);

					this.CDLNCA = readString(dis);

					this.CDVACA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FIDOCA = null;
					} else {
						this.FIDOCA = dis.readFloat();
					}

					this.MSPECA = readString(dis);

					this.MCONCA = readString(dis);

					this.MIMBCA = readString(dis);

					this.NTELCA = readString(dis);

					this.NFAXCA = readString(dis);

					this.INELCA = readString(dis);

					this.SWEBCA = readString(dis);

					this.NOTECA = readString(dis);

					this.CSPECA = readString(dis);

					this.CDCSCA = readString(dis);

					this.COAQCA = readString(dis);

					this.CCORCA = readString(dis);

					this.CNCOCA = readString(dis);

					this.CAGRCA = readString(dis);

					this.CDSACA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ABISCA = null;
					} else {
						this.ABISCA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CABSCA = null;
					} else {
						this.CABSCA = dis.readFloat();
					}

					this.IBASCA = readString(dis);

					this.IDS1CA = readString(dis);

					this.IDS2CA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.GGRCCA = null;
					} else {
						this.GGRCCA = dis.readFloat();
					}

					this.FL01CA = readString(dis);

					this.FL02CA = readString(dis);

					this.FL03CA = readString(dis);

					this.FL04CA = readString(dis);

					this.FL05CA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CMBECA = null;
					} else {
						this.CMBECA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.FIDOCA2 = null;
					} else {
						this.FIDOCA2 = dis.readFloat();
					}

					this.SEQUCA = readString(dis);

					this.CLQUCA = readString(dis);

					this.DPERCA = readString(dis);

					this.TERZCA = readString(dis);

					this.CSOLCA = readString(dis);

					this.CSOACA = readString(dis);

					this.TIPOCA = readString(dis);

					this.INTECA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AT01CA, dos);

				// String

				writeString(this.PROFCA, dos);

				// Float

				if (this.DT01CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DT01CA);
				}

				// Float

				if (this.DTMNCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DTMNCA);
				}

				// Float

				if (this.NR01CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NR01CA);
				}

				// String

				writeString(this.CDDTCA, dos);

				// String

				writeString(this.CONTCA, dos);

				// String

				writeString(this.INDICA, dos);

				// String

				writeString(this.LOCACA, dos);

				// String

				writeString(this.PROVCA, dos);

				// String

				writeString(this.CAPOCA, dos);

				// String

				writeString(this.NAZICA, dos);

				// String

				writeString(this.CISOCA, dos);

				// String

				writeString(this.PIVACA, dos);

				// String

				writeString(this.CDFICA, dos);

				// String

				writeString(this.RIN3CA, dos);

				// String

				writeString(this.RIN4CA, dos);

				// String

				writeString(this.PEFSCA, dos);

				// String

				writeString(this.STCFCA, dos);

				// Float

				if (this.DTAQCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DTAQCA);
				}

				// String

				writeString(this.CLA1CA, dos);

				// String

				writeString(this.CLA2CA, dos);

				// String

				writeString(this.CLA3CA, dos);

				// String

				writeString(this.CLA4CA, dos);

				// String

				writeString(this.CLA5CA, dos);

				// String

				writeString(this.FLALCA, dos);

				// String

				writeString(this.CDPGCA, dos);

				// String

				writeString(this.DEBACA, dos);

				// Float

				if (this.CABICA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CABICA);
				}

				// Float

				if (this.CCABCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CCABCA);
				}

				// String

				writeString(this.IBANCA, dos);

				// String

				writeString(this.IDB1CA, dos);

				// String

				writeString(this.IDB2CA, dos);

				// String

				writeString(this.CDAGCA, dos);

				// Float

				if (this.PRO1CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRO1CA);
				}

				// Float

				if (this.PRO2CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRO2CA);
				}

				// Float

				if (this.SCC1CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SCC1CA);
				}

				// Float

				if (this.SCC2CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SCC2CA);
				}

				// String

				writeString(this.FTDICA, dos);

				// String

				writeString(this.CDIVCA, dos);

				// String

				writeString(this.SPBLCA, dos);

				// String

				writeString(this.TPLICA, dos);

				// String

				writeString(this.CDLICA, dos);

				// String

				writeString(this.TPGICA, dos);

				// String

				writeString(this.CDLNCA, dos);

				// String

				writeString(this.CDVACA, dos);

				// Float

				if (this.FIDOCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FIDOCA);
				}

				// String

				writeString(this.MSPECA, dos);

				// String

				writeString(this.MCONCA, dos);

				// String

				writeString(this.MIMBCA, dos);

				// String

				writeString(this.NTELCA, dos);

				// String

				writeString(this.NFAXCA, dos);

				// String

				writeString(this.INELCA, dos);

				// String

				writeString(this.SWEBCA, dos);

				// String

				writeString(this.NOTECA, dos);

				// String

				writeString(this.CSPECA, dos);

				// String

				writeString(this.CDCSCA, dos);

				// String

				writeString(this.COAQCA, dos);

				// String

				writeString(this.CCORCA, dos);

				// String

				writeString(this.CNCOCA, dos);

				// String

				writeString(this.CAGRCA, dos);

				// String

				writeString(this.CDSACA, dos);

				// Float

				if (this.ABISCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ABISCA);
				}

				// Float

				if (this.CABSCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CABSCA);
				}

				// String

				writeString(this.IBASCA, dos);

				// String

				writeString(this.IDS1CA, dos);

				// String

				writeString(this.IDS2CA, dos);

				// Float

				if (this.GGRCCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.GGRCCA);
				}

				// String

				writeString(this.FL01CA, dos);

				// String

				writeString(this.FL02CA, dos);

				// String

				writeString(this.FL03CA, dos);

				// String

				writeString(this.FL04CA, dos);

				// String

				writeString(this.FL05CA, dos);

				// Float

				if (this.CMBECA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CMBECA);
				}

				// Float

				if (this.FIDOCA2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FIDOCA2);
				}

				// String

				writeString(this.SEQUCA, dos);

				// String

				writeString(this.CLQUCA, dos);

				// String

				writeString(this.DPERCA, dos);

				// String

				writeString(this.TERZCA, dos);

				// String

				writeString(this.CSOLCA, dos);

				// String

				writeString(this.CSOACA, dos);

				// String

				writeString(this.TIPOCA, dos);

				// String

				writeString(this.INTECA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AT01CA=" + AT01CA);
			sb.append(",PROFCA=" + PROFCA);
			sb.append(",DT01CA=" + String.valueOf(DT01CA));
			sb.append(",DTMNCA=" + String.valueOf(DTMNCA));
			sb.append(",NR01CA=" + String.valueOf(NR01CA));
			sb.append(",CDDTCA=" + CDDTCA);
			sb.append(",CONTCA=" + CONTCA);
			sb.append(",INDICA=" + INDICA);
			sb.append(",LOCACA=" + LOCACA);
			sb.append(",PROVCA=" + PROVCA);
			sb.append(",CAPOCA=" + CAPOCA);
			sb.append(",NAZICA=" + NAZICA);
			sb.append(",CISOCA=" + CISOCA);
			sb.append(",PIVACA=" + PIVACA);
			sb.append(",CDFICA=" + CDFICA);
			sb.append(",RIN3CA=" + RIN3CA);
			sb.append(",RIN4CA=" + RIN4CA);
			sb.append(",PEFSCA=" + PEFSCA);
			sb.append(",STCFCA=" + STCFCA);
			sb.append(",DTAQCA=" + String.valueOf(DTAQCA));
			sb.append(",CLA1CA=" + CLA1CA);
			sb.append(",CLA2CA=" + CLA2CA);
			sb.append(",CLA3CA=" + CLA3CA);
			sb.append(",CLA4CA=" + CLA4CA);
			sb.append(",CLA5CA=" + CLA5CA);
			sb.append(",FLALCA=" + FLALCA);
			sb.append(",CDPGCA=" + CDPGCA);
			sb.append(",DEBACA=" + DEBACA);
			sb.append(",CABICA=" + String.valueOf(CABICA));
			sb.append(",CCABCA=" + String.valueOf(CCABCA));
			sb.append(",IBANCA=" + IBANCA);
			sb.append(",IDB1CA=" + IDB1CA);
			sb.append(",IDB2CA=" + IDB2CA);
			sb.append(",CDAGCA=" + CDAGCA);
			sb.append(",PRO1CA=" + String.valueOf(PRO1CA));
			sb.append(",PRO2CA=" + String.valueOf(PRO2CA));
			sb.append(",SCC1CA=" + String.valueOf(SCC1CA));
			sb.append(",SCC2CA=" + String.valueOf(SCC2CA));
			sb.append(",FTDICA=" + FTDICA);
			sb.append(",CDIVCA=" + CDIVCA);
			sb.append(",SPBLCA=" + SPBLCA);
			sb.append(",TPLICA=" + TPLICA);
			sb.append(",CDLICA=" + CDLICA);
			sb.append(",TPGICA=" + TPGICA);
			sb.append(",CDLNCA=" + CDLNCA);
			sb.append(",CDVACA=" + CDVACA);
			sb.append(",FIDOCA=" + String.valueOf(FIDOCA));
			sb.append(",MSPECA=" + MSPECA);
			sb.append(",MCONCA=" + MCONCA);
			sb.append(",MIMBCA=" + MIMBCA);
			sb.append(",NTELCA=" + NTELCA);
			sb.append(",NFAXCA=" + NFAXCA);
			sb.append(",INELCA=" + INELCA);
			sb.append(",SWEBCA=" + SWEBCA);
			sb.append(",NOTECA=" + NOTECA);
			sb.append(",CSPECA=" + CSPECA);
			sb.append(",CDCSCA=" + CDCSCA);
			sb.append(",COAQCA=" + COAQCA);
			sb.append(",CCORCA=" + CCORCA);
			sb.append(",CNCOCA=" + CNCOCA);
			sb.append(",CAGRCA=" + CAGRCA);
			sb.append(",CDSACA=" + CDSACA);
			sb.append(",ABISCA=" + String.valueOf(ABISCA));
			sb.append(",CABSCA=" + String.valueOf(CABSCA));
			sb.append(",IBASCA=" + IBASCA);
			sb.append(",IDS1CA=" + IDS1CA);
			sb.append(",IDS2CA=" + IDS2CA);
			sb.append(",GGRCCA=" + String.valueOf(GGRCCA));
			sb.append(",FL01CA=" + FL01CA);
			sb.append(",FL02CA=" + FL02CA);
			sb.append(",FL03CA=" + FL03CA);
			sb.append(",FL04CA=" + FL04CA);
			sb.append(",FL05CA=" + FL05CA);
			sb.append(",CMBECA=" + String.valueOf(CMBECA));
			sb.append(",FIDOCA2=" + String.valueOf(FIDOCA2));
			sb.append(",SEQUCA=" + SEQUCA);
			sb.append(",CLQUCA=" + CLQUCA);
			sb.append(",DPERCA=" + DPERCA);
			sb.append(",TERZCA=" + TERZCA);
			sb.append(",CSOLCA=" + CSOLCA);
			sb.append(",CSOACA=" + CSOACA);
			sb.append(",TIPOCA=" + TIPOCA);
			sb.append(",INTECA=" + INTECA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAccessInput_1Struct implements
			routines.system.IPersistableRow<after_tAccessInput_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_GToI_ImportBP = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[0];

		public String AT01CA;

		public String getAT01CA() {
			return this.AT01CA;
		}

		public String PROFCA;

		public String getPROFCA() {
			return this.PROFCA;
		}

		public Float DT01CA;

		public Float getDT01CA() {
			return this.DT01CA;
		}

		public Float DTMNCA;

		public Float getDTMNCA() {
			return this.DTMNCA;
		}

		public Float NR01CA;

		public Float getNR01CA() {
			return this.NR01CA;
		}

		public String CDDTCA;

		public String getCDDTCA() {
			return this.CDDTCA;
		}

		public String CONTCA;

		public String getCONTCA() {
			return this.CONTCA;
		}

		public String INDICA;

		public String getINDICA() {
			return this.INDICA;
		}

		public String LOCACA;

		public String getLOCACA() {
			return this.LOCACA;
		}

		public String PROVCA;

		public String getPROVCA() {
			return this.PROVCA;
		}

		public String CAPOCA;

		public String getCAPOCA() {
			return this.CAPOCA;
		}

		public String NAZICA;

		public String getNAZICA() {
			return this.NAZICA;
		}

		public String CISOCA;

		public String getCISOCA() {
			return this.CISOCA;
		}

		public String PIVACA;

		public String getPIVACA() {
			return this.PIVACA;
		}

		public String CDFICA;

		public String getCDFICA() {
			return this.CDFICA;
		}

		public String RIN3CA;

		public String getRIN3CA() {
			return this.RIN3CA;
		}

		public String RIN4CA;

		public String getRIN4CA() {
			return this.RIN4CA;
		}

		public String PEFSCA;

		public String getPEFSCA() {
			return this.PEFSCA;
		}

		public String STCFCA;

		public String getSTCFCA() {
			return this.STCFCA;
		}

		public Float DTAQCA;

		public Float getDTAQCA() {
			return this.DTAQCA;
		}

		public String CLA1CA;

		public String getCLA1CA() {
			return this.CLA1CA;
		}

		public String CLA2CA;

		public String getCLA2CA() {
			return this.CLA2CA;
		}

		public String CLA3CA;

		public String getCLA3CA() {
			return this.CLA3CA;
		}

		public String CLA4CA;

		public String getCLA4CA() {
			return this.CLA4CA;
		}

		public String CLA5CA;

		public String getCLA5CA() {
			return this.CLA5CA;
		}

		public String FLALCA;

		public String getFLALCA() {
			return this.FLALCA;
		}

		public String CDPGCA;

		public String getCDPGCA() {
			return this.CDPGCA;
		}

		public String DEBACA;

		public String getDEBACA() {
			return this.DEBACA;
		}

		public Float CABICA;

		public Float getCABICA() {
			return this.CABICA;
		}

		public Float CCABCA;

		public Float getCCABCA() {
			return this.CCABCA;
		}

		public String IBANCA;

		public String getIBANCA() {
			return this.IBANCA;
		}

		public String IDB1CA;

		public String getIDB1CA() {
			return this.IDB1CA;
		}

		public String IDB2CA;

		public String getIDB2CA() {
			return this.IDB2CA;
		}

		public String CDAGCA;

		public String getCDAGCA() {
			return this.CDAGCA;
		}

		public Float PRO1CA;

		public Float getPRO1CA() {
			return this.PRO1CA;
		}

		public Float PRO2CA;

		public Float getPRO2CA() {
			return this.PRO2CA;
		}

		public Float SCC1CA;

		public Float getSCC1CA() {
			return this.SCC1CA;
		}

		public Float SCC2CA;

		public Float getSCC2CA() {
			return this.SCC2CA;
		}

		public String FTDICA;

		public String getFTDICA() {
			return this.FTDICA;
		}

		public String CDIVCA;

		public String getCDIVCA() {
			return this.CDIVCA;
		}

		public String SPBLCA;

		public String getSPBLCA() {
			return this.SPBLCA;
		}

		public String TPLICA;

		public String getTPLICA() {
			return this.TPLICA;
		}

		public String CDLICA;

		public String getCDLICA() {
			return this.CDLICA;
		}

		public String TPGICA;

		public String getTPGICA() {
			return this.TPGICA;
		}

		public String CDLNCA;

		public String getCDLNCA() {
			return this.CDLNCA;
		}

		public String CDVACA;

		public String getCDVACA() {
			return this.CDVACA;
		}

		public Float FIDOCA;

		public Float getFIDOCA() {
			return this.FIDOCA;
		}

		public String MSPECA;

		public String getMSPECA() {
			return this.MSPECA;
		}

		public String MCONCA;

		public String getMCONCA() {
			return this.MCONCA;
		}

		public String MIMBCA;

		public String getMIMBCA() {
			return this.MIMBCA;
		}

		public String NTELCA;

		public String getNTELCA() {
			return this.NTELCA;
		}

		public String NFAXCA;

		public String getNFAXCA() {
			return this.NFAXCA;
		}

		public String INELCA;

		public String getINELCA() {
			return this.INELCA;
		}

		public String SWEBCA;

		public String getSWEBCA() {
			return this.SWEBCA;
		}

		public String NOTECA;

		public String getNOTECA() {
			return this.NOTECA;
		}

		public String CSPECA;

		public String getCSPECA() {
			return this.CSPECA;
		}

		public String CDCSCA;

		public String getCDCSCA() {
			return this.CDCSCA;
		}

		public String COAQCA;

		public String getCOAQCA() {
			return this.COAQCA;
		}

		public String CCORCA;

		public String getCCORCA() {
			return this.CCORCA;
		}

		public String CNCOCA;

		public String getCNCOCA() {
			return this.CNCOCA;
		}

		public String CAGRCA;

		public String getCAGRCA() {
			return this.CAGRCA;
		}

		public String CDSACA;

		public String getCDSACA() {
			return this.CDSACA;
		}

		public Float ABISCA;

		public Float getABISCA() {
			return this.ABISCA;
		}

		public Float CABSCA;

		public Float getCABSCA() {
			return this.CABSCA;
		}

		public String IBASCA;

		public String getIBASCA() {
			return this.IBASCA;
		}

		public String IDS1CA;

		public String getIDS1CA() {
			return this.IDS1CA;
		}

		public String IDS2CA;

		public String getIDS2CA() {
			return this.IDS2CA;
		}

		public Float GGRCCA;

		public Float getGGRCCA() {
			return this.GGRCCA;
		}

		public String FL01CA;

		public String getFL01CA() {
			return this.FL01CA;
		}

		public String FL02CA;

		public String getFL02CA() {
			return this.FL02CA;
		}

		public String FL03CA;

		public String getFL03CA() {
			return this.FL03CA;
		}

		public String FL04CA;

		public String getFL04CA() {
			return this.FL04CA;
		}

		public String FL05CA;

		public String getFL05CA() {
			return this.FL05CA;
		}

		public Float CMBECA;

		public Float getCMBECA() {
			return this.CMBECA;
		}

		public Float FIDOCA2;

		public Float getFIDOCA2() {
			return this.FIDOCA2;
		}

		public String SEQUCA;

		public String getSEQUCA() {
			return this.SEQUCA;
		}

		public String CLQUCA;

		public String getCLQUCA() {
			return this.CLQUCA;
		}

		public String DPERCA;

		public String getDPERCA() {
			return this.DPERCA;
		}

		public String TERZCA;

		public String getTERZCA() {
			return this.TERZCA;
		}

		public String CSOLCA;

		public String getCSOLCA() {
			return this.CSOLCA;
		}

		public String CSOACA;

		public String getCSOACA() {
			return this.CSOACA;
		}

		public String TIPOCA;

		public String getTIPOCA() {
			return this.TIPOCA;
		}

		public String INTECA;

		public String getINTECA() {
			return this.INTECA;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_GToI_ImportBP.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_GToI_ImportBP.length == 0) {
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_GToI_ImportBP, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_GToI_ImportBP) {

				try {

					int length = 0;

					this.AT01CA = readString(dis);

					this.PROFCA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DT01CA = null;
					} else {
						this.DT01CA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DTMNCA = null;
					} else {
						this.DTMNCA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NR01CA = null;
					} else {
						this.NR01CA = dis.readFloat();
					}

					this.CDDTCA = readString(dis);

					this.CONTCA = readString(dis);

					this.INDICA = readString(dis);

					this.LOCACA = readString(dis);

					this.PROVCA = readString(dis);

					this.CAPOCA = readString(dis);

					this.NAZICA = readString(dis);

					this.CISOCA = readString(dis);

					this.PIVACA = readString(dis);

					this.CDFICA = readString(dis);

					this.RIN3CA = readString(dis);

					this.RIN4CA = readString(dis);

					this.PEFSCA = readString(dis);

					this.STCFCA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DTAQCA = null;
					} else {
						this.DTAQCA = dis.readFloat();
					}

					this.CLA1CA = readString(dis);

					this.CLA2CA = readString(dis);

					this.CLA3CA = readString(dis);

					this.CLA4CA = readString(dis);

					this.CLA5CA = readString(dis);

					this.FLALCA = readString(dis);

					this.CDPGCA = readString(dis);

					this.DEBACA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CABICA = null;
					} else {
						this.CABICA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CCABCA = null;
					} else {
						this.CCABCA = dis.readFloat();
					}

					this.IBANCA = readString(dis);

					this.IDB1CA = readString(dis);

					this.IDB2CA = readString(dis);

					this.CDAGCA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRO1CA = null;
					} else {
						this.PRO1CA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRO2CA = null;
					} else {
						this.PRO2CA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SCC1CA = null;
					} else {
						this.SCC1CA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SCC2CA = null;
					} else {
						this.SCC2CA = dis.readFloat();
					}

					this.FTDICA = readString(dis);

					this.CDIVCA = readString(dis);

					this.SPBLCA = readString(dis);

					this.TPLICA = readString(dis);

					this.CDLICA = readString(dis);

					this.TPGICA = readString(dis);

					this.CDLNCA = readString(dis);

					this.CDVACA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FIDOCA = null;
					} else {
						this.FIDOCA = dis.readFloat();
					}

					this.MSPECA = readString(dis);

					this.MCONCA = readString(dis);

					this.MIMBCA = readString(dis);

					this.NTELCA = readString(dis);

					this.NFAXCA = readString(dis);

					this.INELCA = readString(dis);

					this.SWEBCA = readString(dis);

					this.NOTECA = readString(dis);

					this.CSPECA = readString(dis);

					this.CDCSCA = readString(dis);

					this.COAQCA = readString(dis);

					this.CCORCA = readString(dis);

					this.CNCOCA = readString(dis);

					this.CAGRCA = readString(dis);

					this.CDSACA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ABISCA = null;
					} else {
						this.ABISCA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CABSCA = null;
					} else {
						this.CABSCA = dis.readFloat();
					}

					this.IBASCA = readString(dis);

					this.IDS1CA = readString(dis);

					this.IDS2CA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.GGRCCA = null;
					} else {
						this.GGRCCA = dis.readFloat();
					}

					this.FL01CA = readString(dis);

					this.FL02CA = readString(dis);

					this.FL03CA = readString(dis);

					this.FL04CA = readString(dis);

					this.FL05CA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CMBECA = null;
					} else {
						this.CMBECA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.FIDOCA2 = null;
					} else {
						this.FIDOCA2 = dis.readFloat();
					}

					this.SEQUCA = readString(dis);

					this.CLQUCA = readString(dis);

					this.DPERCA = readString(dis);

					this.TERZCA = readString(dis);

					this.CSOLCA = readString(dis);

					this.CSOACA = readString(dis);

					this.TIPOCA = readString(dis);

					this.INTECA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AT01CA, dos);

				// String

				writeString(this.PROFCA, dos);

				// Float

				if (this.DT01CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DT01CA);
				}

				// Float

				if (this.DTMNCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DTMNCA);
				}

				// Float

				if (this.NR01CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NR01CA);
				}

				// String

				writeString(this.CDDTCA, dos);

				// String

				writeString(this.CONTCA, dos);

				// String

				writeString(this.INDICA, dos);

				// String

				writeString(this.LOCACA, dos);

				// String

				writeString(this.PROVCA, dos);

				// String

				writeString(this.CAPOCA, dos);

				// String

				writeString(this.NAZICA, dos);

				// String

				writeString(this.CISOCA, dos);

				// String

				writeString(this.PIVACA, dos);

				// String

				writeString(this.CDFICA, dos);

				// String

				writeString(this.RIN3CA, dos);

				// String

				writeString(this.RIN4CA, dos);

				// String

				writeString(this.PEFSCA, dos);

				// String

				writeString(this.STCFCA, dos);

				// Float

				if (this.DTAQCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DTAQCA);
				}

				// String

				writeString(this.CLA1CA, dos);

				// String

				writeString(this.CLA2CA, dos);

				// String

				writeString(this.CLA3CA, dos);

				// String

				writeString(this.CLA4CA, dos);

				// String

				writeString(this.CLA5CA, dos);

				// String

				writeString(this.FLALCA, dos);

				// String

				writeString(this.CDPGCA, dos);

				// String

				writeString(this.DEBACA, dos);

				// Float

				if (this.CABICA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CABICA);
				}

				// Float

				if (this.CCABCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CCABCA);
				}

				// String

				writeString(this.IBANCA, dos);

				// String

				writeString(this.IDB1CA, dos);

				// String

				writeString(this.IDB2CA, dos);

				// String

				writeString(this.CDAGCA, dos);

				// Float

				if (this.PRO1CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRO1CA);
				}

				// Float

				if (this.PRO2CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRO2CA);
				}

				// Float

				if (this.SCC1CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SCC1CA);
				}

				// Float

				if (this.SCC2CA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SCC2CA);
				}

				// String

				writeString(this.FTDICA, dos);

				// String

				writeString(this.CDIVCA, dos);

				// String

				writeString(this.SPBLCA, dos);

				// String

				writeString(this.TPLICA, dos);

				// String

				writeString(this.CDLICA, dos);

				// String

				writeString(this.TPGICA, dos);

				// String

				writeString(this.CDLNCA, dos);

				// String

				writeString(this.CDVACA, dos);

				// Float

				if (this.FIDOCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FIDOCA);
				}

				// String

				writeString(this.MSPECA, dos);

				// String

				writeString(this.MCONCA, dos);

				// String

				writeString(this.MIMBCA, dos);

				// String

				writeString(this.NTELCA, dos);

				// String

				writeString(this.NFAXCA, dos);

				// String

				writeString(this.INELCA, dos);

				// String

				writeString(this.SWEBCA, dos);

				// String

				writeString(this.NOTECA, dos);

				// String

				writeString(this.CSPECA, dos);

				// String

				writeString(this.CDCSCA, dos);

				// String

				writeString(this.COAQCA, dos);

				// String

				writeString(this.CCORCA, dos);

				// String

				writeString(this.CNCOCA, dos);

				// String

				writeString(this.CAGRCA, dos);

				// String

				writeString(this.CDSACA, dos);

				// Float

				if (this.ABISCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ABISCA);
				}

				// Float

				if (this.CABSCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CABSCA);
				}

				// String

				writeString(this.IBASCA, dos);

				// String

				writeString(this.IDS1CA, dos);

				// String

				writeString(this.IDS2CA, dos);

				// Float

				if (this.GGRCCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.GGRCCA);
				}

				// String

				writeString(this.FL01CA, dos);

				// String

				writeString(this.FL02CA, dos);

				// String

				writeString(this.FL03CA, dos);

				// String

				writeString(this.FL04CA, dos);

				// String

				writeString(this.FL05CA, dos);

				// Float

				if (this.CMBECA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CMBECA);
				}

				// Float

				if (this.FIDOCA2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FIDOCA2);
				}

				// String

				writeString(this.SEQUCA, dos);

				// String

				writeString(this.CLQUCA, dos);

				// String

				writeString(this.DPERCA, dos);

				// String

				writeString(this.TERZCA, dos);

				// String

				writeString(this.CSOLCA, dos);

				// String

				writeString(this.CSOACA, dos);

				// String

				writeString(this.TIPOCA, dos);

				// String

				writeString(this.INTECA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AT01CA=" + AT01CA);
			sb.append(",PROFCA=" + PROFCA);
			sb.append(",DT01CA=" + String.valueOf(DT01CA));
			sb.append(",DTMNCA=" + String.valueOf(DTMNCA));
			sb.append(",NR01CA=" + String.valueOf(NR01CA));
			sb.append(",CDDTCA=" + CDDTCA);
			sb.append(",CONTCA=" + CONTCA);
			sb.append(",INDICA=" + INDICA);
			sb.append(",LOCACA=" + LOCACA);
			sb.append(",PROVCA=" + PROVCA);
			sb.append(",CAPOCA=" + CAPOCA);
			sb.append(",NAZICA=" + NAZICA);
			sb.append(",CISOCA=" + CISOCA);
			sb.append(",PIVACA=" + PIVACA);
			sb.append(",CDFICA=" + CDFICA);
			sb.append(",RIN3CA=" + RIN3CA);
			sb.append(",RIN4CA=" + RIN4CA);
			sb.append(",PEFSCA=" + PEFSCA);
			sb.append(",STCFCA=" + STCFCA);
			sb.append(",DTAQCA=" + String.valueOf(DTAQCA));
			sb.append(",CLA1CA=" + CLA1CA);
			sb.append(",CLA2CA=" + CLA2CA);
			sb.append(",CLA3CA=" + CLA3CA);
			sb.append(",CLA4CA=" + CLA4CA);
			sb.append(",CLA5CA=" + CLA5CA);
			sb.append(",FLALCA=" + FLALCA);
			sb.append(",CDPGCA=" + CDPGCA);
			sb.append(",DEBACA=" + DEBACA);
			sb.append(",CABICA=" + String.valueOf(CABICA));
			sb.append(",CCABCA=" + String.valueOf(CCABCA));
			sb.append(",IBANCA=" + IBANCA);
			sb.append(",IDB1CA=" + IDB1CA);
			sb.append(",IDB2CA=" + IDB2CA);
			sb.append(",CDAGCA=" + CDAGCA);
			sb.append(",PRO1CA=" + String.valueOf(PRO1CA));
			sb.append(",PRO2CA=" + String.valueOf(PRO2CA));
			sb.append(",SCC1CA=" + String.valueOf(SCC1CA));
			sb.append(",SCC2CA=" + String.valueOf(SCC2CA));
			sb.append(",FTDICA=" + FTDICA);
			sb.append(",CDIVCA=" + CDIVCA);
			sb.append(",SPBLCA=" + SPBLCA);
			sb.append(",TPLICA=" + TPLICA);
			sb.append(",CDLICA=" + CDLICA);
			sb.append(",TPGICA=" + TPGICA);
			sb.append(",CDLNCA=" + CDLNCA);
			sb.append(",CDVACA=" + CDVACA);
			sb.append(",FIDOCA=" + String.valueOf(FIDOCA));
			sb.append(",MSPECA=" + MSPECA);
			sb.append(",MCONCA=" + MCONCA);
			sb.append(",MIMBCA=" + MIMBCA);
			sb.append(",NTELCA=" + NTELCA);
			sb.append(",NFAXCA=" + NFAXCA);
			sb.append(",INELCA=" + INELCA);
			sb.append(",SWEBCA=" + SWEBCA);
			sb.append(",NOTECA=" + NOTECA);
			sb.append(",CSPECA=" + CSPECA);
			sb.append(",CDCSCA=" + CDCSCA);
			sb.append(",COAQCA=" + COAQCA);
			sb.append(",CCORCA=" + CCORCA);
			sb.append(",CNCOCA=" + CNCOCA);
			sb.append(",CAGRCA=" + CAGRCA);
			sb.append(",CDSACA=" + CDSACA);
			sb.append(",ABISCA=" + String.valueOf(ABISCA));
			sb.append(",CABSCA=" + String.valueOf(CABSCA));
			sb.append(",IBASCA=" + IBASCA);
			sb.append(",IDS1CA=" + IDS1CA);
			sb.append(",IDS2CA=" + IDS2CA);
			sb.append(",GGRCCA=" + String.valueOf(GGRCCA));
			sb.append(",FL01CA=" + FL01CA);
			sb.append(",FL02CA=" + FL02CA);
			sb.append(",FL03CA=" + FL03CA);
			sb.append(",FL04CA=" + FL04CA);
			sb.append(",FL05CA=" + FL05CA);
			sb.append(",CMBECA=" + String.valueOf(CMBECA));
			sb.append(",FIDOCA2=" + String.valueOf(FIDOCA2));
			sb.append(",SEQUCA=" + SEQUCA);
			sb.append(",CLQUCA=" + CLQUCA);
			sb.append(",DPERCA=" + DPERCA);
			sb.append(",TERZCA=" + TERZCA);
			sb.append(",CSOLCA=" + CSOLCA);
			sb.append(",CSOACA=" + CSOACA);
			sb.append(",TIPOCA=" + TIPOCA);
			sb.append(",INTECA=" + INTECA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAccessInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAccessInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAccessInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAccessInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				insert_bpStruct insert_bp = new insert_bpStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("insert_bp" + iterateId,
								0, 0);

					}
				}

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = "";

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "i_bpartner";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "i_bpartner";
				}

				int updateKeyCount_tPostgresqlOutput_1 = 1;
				if (updateKeyCount_tPostgresqlOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;
				String dbUser_tPostgresqlOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_1 = "jdbc:postgresql://" + "lux1"
						+ ":" + "5432" + "/" + "idempiere";
				dbUser_tPostgresqlOutput_1 = "adempiere";

				final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("1b1a87b585739115c3e16b424acd1219");

				String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

				conn_tPostgresqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_1,
								dbUser_tPostgresqlOutput_1,
								dbPwd_tPostgresqlOutput_1);

				resourceMap.put("conn_tPostgresqlOutput_1",
						conn_tPostgresqlOutput_1);
				conn_tPostgresqlOutput_1.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_1 = 10000;
				int commitCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_1
								+ "\" WHERE \"i_bpartner_id\" = ?");
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"i_bpartner_id\",\"ad_client_id\",\"ad_org_id\",\"isactive\",\"created\",\"createdby\",\"updated\",\"updatedby\",\"i_isimported\",\"i_errormsg\",\"c_bpartner_id\",\"value\",\"name\",\"name2\",\"description\",\"duns\",\"taxid\",\"naics\",\"groupvalue\",\"c_bp_group_id\",\"c_bpartner_location_id\",\"address1\",\"address2\",\"postal\",\"postal_add\",\"city\",\"c_region_id\",\"regionname\",\"c_country_id\",\"countrycode\",\"title\",\"contactname\",\"contactdescription\",\"comments\",\"phone\",\"phone2\",\"fax\",\"email\",\"password\",\"birthday\",\"c_greeting_id\",\"bpcontactgreeting\",\"processing\",\"processed\",\"ad_user_id\",\"r_interestarea_id\",\"interestareaname\",\"iscustomer\",\"isemployee\",\"isvendor\",\"i_bpartner_uu\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);
				String update_tPostgresqlOutput_1 = "UPDATE \""
						+ tableName_tPostgresqlOutput_1
						+ "\" SET \"ad_client_id\" = ?,\"ad_org_id\" = ?,\"isactive\" = ?,\"created\" = ?,\"createdby\" = ?,\"updated\" = ?,\"updatedby\" = ?,\"i_isimported\" = ?,\"i_errormsg\" = ?,\"c_bpartner_id\" = ?,\"value\" = ?,\"name\" = ?,\"name2\" = ?,\"description\" = ?,\"duns\" = ?,\"taxid\" = ?,\"naics\" = ?,\"groupvalue\" = ?,\"c_bp_group_id\" = ?,\"c_bpartner_location_id\" = ?,\"address1\" = ?,\"address2\" = ?,\"postal\" = ?,\"postal_add\" = ?,\"city\" = ?,\"c_region_id\" = ?,\"regionname\" = ?,\"c_country_id\" = ?,\"countrycode\" = ?,\"title\" = ?,\"contactname\" = ?,\"contactdescription\" = ?,\"comments\" = ?,\"phone\" = ?,\"phone2\" = ?,\"fax\" = ?,\"email\" = ?,\"password\" = ?,\"birthday\" = ?,\"c_greeting_id\" = ?,\"bpcontactgreeting\" = ?,\"processing\" = ?,\"processed\" = ?,\"ad_user_id\" = ?,\"r_interestarea_id\" = ?,\"interestareaname\" = ?,\"iscustomer\" = ?,\"isemployee\" = ?,\"isvendor\" = ?,\"i_bpartner_uu\" = ? WHERE \"i_bpartner_id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(update_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					double var1;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				insert_bpStruct insert_bp_tmp = new insert_bpStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tAccessInput_1 begin ] start
				 */

				ok_Hash.put("tAccessInput_1", false);
				start_Hash.put("tAccessInput_1", System.currentTimeMillis());

				currentComponent = "tAccessInput_1";

				int tos_count_tAccessInput_1 = 0;

				int nb_line_tAccessInput_1 = 0;
				java.sql.Connection conn_tAccessInput_1 = null;
				String driverClass_tAccessInput_1 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tAccessInput_1);

				String url_tAccessInput_1 = "jdbc:ucanaccess://"
						+ "/home/luxguru88/Scrivania/as400_r0.mdb";
				String dbUser_tAccessInput_1 = "";

				final String decryptedPassword_tAccessInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tAccessInput_1 = decryptedPassword_tAccessInput_1;

				String atnParams_tAccessInput_1 = "memory=false";
				atnParams_tAccessInput_1 = atnParams_tAccessInput_1.replaceAll(
						"&", "\n");
				java.util.Properties atnParamsPrope_tAccessInput_1 = new java.util.Properties();
				atnParamsPrope_tAccessInput_1
						.put("user", dbUser_tAccessInput_1);
				atnParamsPrope_tAccessInput_1.put("password",
						dbPwd_tAccessInput_1);
				atnParamsPrope_tAccessInput_1
						.load(new java.io.ByteArrayInputStream(
								atnParams_tAccessInput_1.getBytes()));
				conn_tAccessInput_1 = java.sql.DriverManager.getConnection(
						url_tAccessInput_1, atnParamsPrope_tAccessInput_1);

				java.sql.Statement stmt_tAccessInput_1 = conn_tAccessInput_1
						.createStatement();

				String dbquery_tAccessInput_1 = "SELECT \n  ZCGANA00F.AT01CA, \n  ZCGANA00F.PROFCA, \n  ZCGANA00F.DT01CA, \n  ZCGANA00F.DTMNCA, \n  ZCGANA00F.NR01CA, \n  ZCGANA00F.CDDTCA, \n  ZCGANA00F.CONTCA, \n  ZCGANA00F.INDICA, \n  ZCGANA00F.LOCACA, \n  ZCGANA00F.PROVCA, \n  ZCGANA00F.CAPOCA, \n  ZCGANA00F.NAZICA, \n  ZCGANA00F.CISOCA, \n  ZCGANA00F.PIVACA, \n  ZCGANA00F.CDFICA, \n  ZCGANA00F.RIN3CA, \n  ZCGANA00F.RIN4CA, \n  ZCGANA00F.PEFSCA, \n  ZCGANA00F.STCFCA, \n  ZCGANA00F.DTAQCA, \n  ZCGANA00F.CLA1CA, \n  ZCGANA00F.CLA2CA, \n  ZCGANA00F.CLA3CA, \n  ZCGANA00F.CLA4CA, \n  ZCGANA00F.CLA5CA, \n  ZCGANA00F.FLALCA, \n  ZCGANA00F.CDPGCA, \n  ZCGANA00F.DEBACA, \n  ZCGANA00F.CABICA, \n  ZCGANA00F.CCABCA, \n  ZCGANA00F.IBANCA, \n  ZCGANA00F.IDB1CA, \n  ZCGANA00F.IDB2CA, \n  ZCGANA00F.CDAGCA, \n  ZCGANA00F.PRO1CA, \n  ZCGANA00F.PRO2CA, \n  ZCGANA00F.SCC1CA, \n  ZCGANA00F.SCC2CA, \n  ZCGANA00F.FTDICA, \n  ZCGANA00F.CDIVCA, \n  ZCGANA00F.SPBLCA, \n  ZCGANA00F.TPLICA, \n  ZCGANA00F.CDLICA, \n  ZCGANA00F.TPGICA, \n  ZCGANA00F.CDLNCA, \n  ZCGANA00F.CDVACA, \n  ZCGANA00F.FIDOCA, \n  ZCGANA00F.MSPECA, \n  ZCGANA00F.MCONCA, \n  ZCGANA00F.MIMBCA, \n  ZCGANA00F.NTELCA, \n  ZCGANA00F.NFAXCA, \n  ZCGANA00F.INELCA, \n  ZCGANA00F.SWEBCA, \n  ZCGANA00F.NOTECA, \n  ZCGANA00F.CSPECA, \n  ZCGANA00F.CDCSCA, \n  ZCGANA00F.COAQCA, \n  ZCGANA00F.CCORCA, \n  ZCGANA00F.CNCOCA, \n  ZCGANA00F.CAGRCA, \n  ZCGANA00F.CDSACA, \n  ZCGANA00F.ABISCA, \n  ZCGANA00F.CABSCA, \n  ZCGANA00F.IBASCA, \n  ZCGANA00F.IDS1CA, \n  ZCGANA00F.IDS2CA, \n  ZCGANA00F.GGRCCA, \n  ZCGANA00F.FL01CA, \n  ZCGANA00F.FL02CA, \n  ZCGANA00F.FL03CA, \n  ZCGANA00F.FL04CA, \n  ZCGANA00F.FL05CA, \n  ZCGANA00F.CMBECA, \n  ZCGANA00F.FIDOCA2, \n  ZCGANA00F.SEQUCA, \n  ZCGANA00F.CLQUCA, \n  ZCGANA00F.DPERCA, \n  ZCGANA00F.TERZCA, \n  ZCGANA00F.CSOLCA, \n  ZCGANA00F.CSOACA, \n  ZCGANA00F.TIPOCA, \n  ZCGANA00F.INTECA\nFROM ZCGANA00F";

				globalMap.put("tAccessInput_1_QUERY", dbquery_tAccessInput_1);

				java.sql.ResultSet rs_tAccessInput_1 = null;
				try {
					rs_tAccessInput_1 = stmt_tAccessInput_1
							.executeQuery(dbquery_tAccessInput_1);
					java.sql.ResultSetMetaData rsmd_tAccessInput_1 = rs_tAccessInput_1
							.getMetaData();
					int colQtyInRs_tAccessInput_1 = rsmd_tAccessInput_1
							.getColumnCount();

					String tmpContent_tAccessInput_1 = null;

					while (rs_tAccessInput_1.next()) {
						nb_line_tAccessInput_1++;

						if (colQtyInRs_tAccessInput_1 < 1) {
							row1.AT01CA = null;
						} else {

							row1.AT01CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 1, false);
						}
						if (colQtyInRs_tAccessInput_1 < 2) {
							row1.PROFCA = null;
						} else {

							row1.PROFCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 2, false);
						}
						if (colQtyInRs_tAccessInput_1 < 3) {
							row1.DT01CA = null;
						} else {

							if (rs_tAccessInput_1.getObject(3) != null) {
								row1.DT01CA = rs_tAccessInput_1.getFloat(3);
							} else {
								row1.DT01CA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 4) {
							row1.DTMNCA = null;
						} else {

							if (rs_tAccessInput_1.getObject(4) != null) {
								row1.DTMNCA = rs_tAccessInput_1.getFloat(4);
							} else {
								row1.DTMNCA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 5) {
							row1.NR01CA = null;
						} else {

							if (rs_tAccessInput_1.getObject(5) != null) {
								row1.NR01CA = rs_tAccessInput_1.getFloat(5);
							} else {
								row1.NR01CA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 6) {
							row1.CDDTCA = null;
						} else {

							row1.CDDTCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 6, false);
						}
						if (colQtyInRs_tAccessInput_1 < 7) {
							row1.CONTCA = null;
						} else {

							row1.CONTCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 7, false);
						}
						if (colQtyInRs_tAccessInput_1 < 8) {
							row1.INDICA = null;
						} else {

							row1.INDICA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 8, false);
						}
						if (colQtyInRs_tAccessInput_1 < 9) {
							row1.LOCACA = null;
						} else {

							row1.LOCACA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 9, false);
						}
						if (colQtyInRs_tAccessInput_1 < 10) {
							row1.PROVCA = null;
						} else {

							row1.PROVCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 10, false);
						}
						if (colQtyInRs_tAccessInput_1 < 11) {
							row1.CAPOCA = null;
						} else {

							row1.CAPOCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 11, false);
						}
						if (colQtyInRs_tAccessInput_1 < 12) {
							row1.NAZICA = null;
						} else {

							row1.NAZICA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 12, false);
						}
						if (colQtyInRs_tAccessInput_1 < 13) {
							row1.CISOCA = null;
						} else {

							row1.CISOCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 13, false);
						}
						if (colQtyInRs_tAccessInput_1 < 14) {
							row1.PIVACA = null;
						} else {

							row1.PIVACA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 14, false);
						}
						if (colQtyInRs_tAccessInput_1 < 15) {
							row1.CDFICA = null;
						} else {

							row1.CDFICA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 15, false);
						}
						if (colQtyInRs_tAccessInput_1 < 16) {
							row1.RIN3CA = null;
						} else {

							row1.RIN3CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 16, false);
						}
						if (colQtyInRs_tAccessInput_1 < 17) {
							row1.RIN4CA = null;
						} else {

							row1.RIN4CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 17, false);
						}
						if (colQtyInRs_tAccessInput_1 < 18) {
							row1.PEFSCA = null;
						} else {

							row1.PEFSCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 18, false);
						}
						if (colQtyInRs_tAccessInput_1 < 19) {
							row1.STCFCA = null;
						} else {

							row1.STCFCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 19, false);
						}
						if (colQtyInRs_tAccessInput_1 < 20) {
							row1.DTAQCA = null;
						} else {

							if (rs_tAccessInput_1.getObject(20) != null) {
								row1.DTAQCA = rs_tAccessInput_1.getFloat(20);
							} else {
								row1.DTAQCA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 21) {
							row1.CLA1CA = null;
						} else {

							row1.CLA1CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 21, false);
						}
						if (colQtyInRs_tAccessInput_1 < 22) {
							row1.CLA2CA = null;
						} else {

							row1.CLA2CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 22, false);
						}
						if (colQtyInRs_tAccessInput_1 < 23) {
							row1.CLA3CA = null;
						} else {

							row1.CLA3CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 23, false);
						}
						if (colQtyInRs_tAccessInput_1 < 24) {
							row1.CLA4CA = null;
						} else {

							row1.CLA4CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 24, false);
						}
						if (colQtyInRs_tAccessInput_1 < 25) {
							row1.CLA5CA = null;
						} else {

							row1.CLA5CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 25, false);
						}
						if (colQtyInRs_tAccessInput_1 < 26) {
							row1.FLALCA = null;
						} else {

							row1.FLALCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 26, false);
						}
						if (colQtyInRs_tAccessInput_1 < 27) {
							row1.CDPGCA = null;
						} else {

							row1.CDPGCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 27, false);
						}
						if (colQtyInRs_tAccessInput_1 < 28) {
							row1.DEBACA = null;
						} else {

							row1.DEBACA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 28, false);
						}
						if (colQtyInRs_tAccessInput_1 < 29) {
							row1.CABICA = null;
						} else {

							if (rs_tAccessInput_1.getObject(29) != null) {
								row1.CABICA = rs_tAccessInput_1.getFloat(29);
							} else {
								row1.CABICA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 30) {
							row1.CCABCA = null;
						} else {

							if (rs_tAccessInput_1.getObject(30) != null) {
								row1.CCABCA = rs_tAccessInput_1.getFloat(30);
							} else {
								row1.CCABCA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 31) {
							row1.IBANCA = null;
						} else {

							row1.IBANCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 31, false);
						}
						if (colQtyInRs_tAccessInput_1 < 32) {
							row1.IDB1CA = null;
						} else {

							row1.IDB1CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 32, false);
						}
						if (colQtyInRs_tAccessInput_1 < 33) {
							row1.IDB2CA = null;
						} else {

							row1.IDB2CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 33, false);
						}
						if (colQtyInRs_tAccessInput_1 < 34) {
							row1.CDAGCA = null;
						} else {

							row1.CDAGCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 34, false);
						}
						if (colQtyInRs_tAccessInput_1 < 35) {
							row1.PRO1CA = null;
						} else {

							if (rs_tAccessInput_1.getObject(35) != null) {
								row1.PRO1CA = rs_tAccessInput_1.getFloat(35);
							} else {
								row1.PRO1CA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 36) {
							row1.PRO2CA = null;
						} else {

							if (rs_tAccessInput_1.getObject(36) != null) {
								row1.PRO2CA = rs_tAccessInput_1.getFloat(36);
							} else {
								row1.PRO2CA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 37) {
							row1.SCC1CA = null;
						} else {

							if (rs_tAccessInput_1.getObject(37) != null) {
								row1.SCC1CA = rs_tAccessInput_1.getFloat(37);
							} else {
								row1.SCC1CA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 38) {
							row1.SCC2CA = null;
						} else {

							if (rs_tAccessInput_1.getObject(38) != null) {
								row1.SCC2CA = rs_tAccessInput_1.getFloat(38);
							} else {
								row1.SCC2CA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 39) {
							row1.FTDICA = null;
						} else {

							row1.FTDICA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 39, false);
						}
						if (colQtyInRs_tAccessInput_1 < 40) {
							row1.CDIVCA = null;
						} else {

							row1.CDIVCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 40, false);
						}
						if (colQtyInRs_tAccessInput_1 < 41) {
							row1.SPBLCA = null;
						} else {

							row1.SPBLCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 41, false);
						}
						if (colQtyInRs_tAccessInput_1 < 42) {
							row1.TPLICA = null;
						} else {

							row1.TPLICA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 42, false);
						}
						if (colQtyInRs_tAccessInput_1 < 43) {
							row1.CDLICA = null;
						} else {

							row1.CDLICA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 43, false);
						}
						if (colQtyInRs_tAccessInput_1 < 44) {
							row1.TPGICA = null;
						} else {

							row1.TPGICA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 44, false);
						}
						if (colQtyInRs_tAccessInput_1 < 45) {
							row1.CDLNCA = null;
						} else {

							row1.CDLNCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 45, false);
						}
						if (colQtyInRs_tAccessInput_1 < 46) {
							row1.CDVACA = null;
						} else {

							row1.CDVACA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 46, false);
						}
						if (colQtyInRs_tAccessInput_1 < 47) {
							row1.FIDOCA = null;
						} else {

							if (rs_tAccessInput_1.getObject(47) != null) {
								row1.FIDOCA = rs_tAccessInput_1.getFloat(47);
							} else {
								row1.FIDOCA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 48) {
							row1.MSPECA = null;
						} else {

							row1.MSPECA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 48, false);
						}
						if (colQtyInRs_tAccessInput_1 < 49) {
							row1.MCONCA = null;
						} else {

							row1.MCONCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 49, false);
						}
						if (colQtyInRs_tAccessInput_1 < 50) {
							row1.MIMBCA = null;
						} else {

							row1.MIMBCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 50, false);
						}
						if (colQtyInRs_tAccessInput_1 < 51) {
							row1.NTELCA = null;
						} else {

							row1.NTELCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 51, false);
						}
						if (colQtyInRs_tAccessInput_1 < 52) {
							row1.NFAXCA = null;
						} else {

							row1.NFAXCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 52, false);
						}
						if (colQtyInRs_tAccessInput_1 < 53) {
							row1.INELCA = null;
						} else {

							row1.INELCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 53, false);
						}
						if (colQtyInRs_tAccessInput_1 < 54) {
							row1.SWEBCA = null;
						} else {

							row1.SWEBCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 54, false);
						}
						if (colQtyInRs_tAccessInput_1 < 55) {
							row1.NOTECA = null;
						} else {

							row1.NOTECA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 55, false);
						}
						if (colQtyInRs_tAccessInput_1 < 56) {
							row1.CSPECA = null;
						} else {

							row1.CSPECA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 56, false);
						}
						if (colQtyInRs_tAccessInput_1 < 57) {
							row1.CDCSCA = null;
						} else {

							row1.CDCSCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 57, false);
						}
						if (colQtyInRs_tAccessInput_1 < 58) {
							row1.COAQCA = null;
						} else {

							row1.COAQCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 58, false);
						}
						if (colQtyInRs_tAccessInput_1 < 59) {
							row1.CCORCA = null;
						} else {

							row1.CCORCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 59, false);
						}
						if (colQtyInRs_tAccessInput_1 < 60) {
							row1.CNCOCA = null;
						} else {

							row1.CNCOCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 60, false);
						}
						if (colQtyInRs_tAccessInput_1 < 61) {
							row1.CAGRCA = null;
						} else {

							row1.CAGRCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 61, false);
						}
						if (colQtyInRs_tAccessInput_1 < 62) {
							row1.CDSACA = null;
						} else {

							row1.CDSACA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 62, false);
						}
						if (colQtyInRs_tAccessInput_1 < 63) {
							row1.ABISCA = null;
						} else {

							if (rs_tAccessInput_1.getObject(63) != null) {
								row1.ABISCA = rs_tAccessInput_1.getFloat(63);
							} else {
								row1.ABISCA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 64) {
							row1.CABSCA = null;
						} else {

							if (rs_tAccessInput_1.getObject(64) != null) {
								row1.CABSCA = rs_tAccessInput_1.getFloat(64);
							} else {
								row1.CABSCA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 65) {
							row1.IBASCA = null;
						} else {

							row1.IBASCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 65, false);
						}
						if (colQtyInRs_tAccessInput_1 < 66) {
							row1.IDS1CA = null;
						} else {

							row1.IDS1CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 66, false);
						}
						if (colQtyInRs_tAccessInput_1 < 67) {
							row1.IDS2CA = null;
						} else {

							row1.IDS2CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 67, false);
						}
						if (colQtyInRs_tAccessInput_1 < 68) {
							row1.GGRCCA = null;
						} else {

							if (rs_tAccessInput_1.getObject(68) != null) {
								row1.GGRCCA = rs_tAccessInput_1.getFloat(68);
							} else {
								row1.GGRCCA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 69) {
							row1.FL01CA = null;
						} else {

							row1.FL01CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 69, false);
						}
						if (colQtyInRs_tAccessInput_1 < 70) {
							row1.FL02CA = null;
						} else {

							row1.FL02CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 70, false);
						}
						if (colQtyInRs_tAccessInput_1 < 71) {
							row1.FL03CA = null;
						} else {

							row1.FL03CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 71, false);
						}
						if (colQtyInRs_tAccessInput_1 < 72) {
							row1.FL04CA = null;
						} else {

							row1.FL04CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 72, false);
						}
						if (colQtyInRs_tAccessInput_1 < 73) {
							row1.FL05CA = null;
						} else {

							row1.FL05CA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 73, false);
						}
						if (colQtyInRs_tAccessInput_1 < 74) {
							row1.CMBECA = null;
						} else {

							if (rs_tAccessInput_1.getObject(74) != null) {
								row1.CMBECA = rs_tAccessInput_1.getFloat(74);
							} else {
								row1.CMBECA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 75) {
							row1.FIDOCA2 = null;
						} else {

							if (rs_tAccessInput_1.getObject(75) != null) {
								row1.FIDOCA2 = rs_tAccessInput_1.getFloat(75);
							} else {
								row1.FIDOCA2 = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 76) {
							row1.SEQUCA = null;
						} else {

							row1.SEQUCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 76, false);
						}
						if (colQtyInRs_tAccessInput_1 < 77) {
							row1.CLQUCA = null;
						} else {

							row1.CLQUCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 77, false);
						}
						if (colQtyInRs_tAccessInput_1 < 78) {
							row1.DPERCA = null;
						} else {

							row1.DPERCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 78, false);
						}
						if (colQtyInRs_tAccessInput_1 < 79) {
							row1.TERZCA = null;
						} else {

							row1.TERZCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 79, false);
						}
						if (colQtyInRs_tAccessInput_1 < 80) {
							row1.CSOLCA = null;
						} else {

							row1.CSOLCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 80, false);
						}
						if (colQtyInRs_tAccessInput_1 < 81) {
							row1.CSOACA = null;
						} else {

							row1.CSOACA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 81, false);
						}
						if (colQtyInRs_tAccessInput_1 < 82) {
							row1.TIPOCA = null;
						} else {

							row1.TIPOCA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 82, false);
						}
						if (colQtyInRs_tAccessInput_1 < 83) {
							row1.INTECA = null;
						} else {

							row1.INTECA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 83, false);
						}

						/**
						 * [tAccessInput_1 begin ] stop
						 */

						/**
						 * [tAccessInput_1 main ] start
						 */

						currentComponent = "tAccessInput_1";

						tos_count_tAccessInput_1++;

						/**
						 * [tAccessInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						if (

						(

						row1.PROVCA.equals("TV   ")

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row1'

							// /////////////////////////////////////////////
							// Starting Lookup Table "row2"
							// /////////////////////////////////////////////

							boolean forceLooprow2 = false;

							row2Struct row2ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row2HashKey.CONTCP = row1.CONTCA;

								row2HashKey.hashCodeDirty = true;

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row2 != null
									&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																						// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.CONTCP = '"
								// + row2HashKey.CONTCP + "'");
							} // G 071

							row2Struct row2 = null;

							row2Struct fromLookup_row2 = null;
							row2 = row2Default;

							if (tHash_Lookup_row2 != null
									&& tHash_Lookup_row2.hasNext()) { // G 099

								fromLookup_row2 = tHash_Lookup_row2.next();

							} // G 099

							if (fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;
								Var.var1 = Numeric.sequence("s1", 1000000, 1);// ###############################
								// ###############################
								// # Output tables

								insert_bp = null;

								// # Output table : 'insert_bp'
								insert_bp_tmp.i_bpartner_id = Var.var1;
								insert_bp_tmp.ad_client_id = 1000001.00;
								insert_bp_tmp.ad_org_id = 0.00;
								insert_bp_tmp.isactive = "Y";
								insert_bp_tmp.created = TalendDate
										.getCurrentDate();
								insert_bp_tmp.createdby = 100.00;
								insert_bp_tmp.updated = TalendDate
										.getCurrentDate();
								insert_bp_tmp.updatedby = 100.00;
								insert_bp_tmp.i_isimported = "N";
								insert_bp_tmp.i_errormsg = null;
								insert_bp_tmp.c_bpartner_id = null;
								insert_bp_tmp.value = row2.CONTCP;
								insert_bp_tmp.name = row2.DSCOCP;
								insert_bp_tmp.name2 = null;
								insert_bp_tmp.description = null;
								insert_bp_tmp.duns = null;
								insert_bp_tmp.taxid = row1.PIVACA;
								insert_bp_tmp.naics = null;
								insert_bp_tmp.groupvalue = null;
								insert_bp_tmp.c_bp_group_id = 1000001.00;
								insert_bp_tmp.c_bpartner_location_id = null;
								insert_bp_tmp.address1 = row1.INDICA;
								insert_bp_tmp.address2 = null;
								insert_bp_tmp.postal = row1.CAPOCA;
								insert_bp_tmp.postal_add = null;
								insert_bp_tmp.city = row1.LOCACA;
								insert_bp_tmp.c_region_id = null;
								insert_bp_tmp.regionname = row1.PROVCA;
								insert_bp_tmp.c_country_id = null;
								insert_bp_tmp.countrycode = row1.NAZICA;
								insert_bp_tmp.title = null;
								insert_bp_tmp.contactname = null;
								insert_bp_tmp.contactdescription = null;
								insert_bp_tmp.comments = null;
								insert_bp_tmp.phone = null;
								insert_bp_tmp.phone2 = null;
								insert_bp_tmp.fax = null;
								insert_bp_tmp.email = null;
								insert_bp_tmp.password = null;
								insert_bp_tmp.birthday = null;
								insert_bp_tmp.c_greeting_id = null;
								insert_bp_tmp.bpcontactgreeting = null;
								insert_bp_tmp.processing = "N";
								insert_bp_tmp.processed = "N";
								insert_bp_tmp.ad_user_id = null;
								insert_bp_tmp.r_interestarea_id = null;
								insert_bp_tmp.interestareaname = null;
								insert_bp_tmp.iscustomer = null;
								insert_bp_tmp.isemployee = null;
								insert_bp_tmp.isvendor = null;
								insert_bp_tmp.i_bpartner_uu = Var.var1;
								insert_bp = insert_bp_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "insert_bp"
							if (insert_bp != null) {

								/**
								 * [tPostgresqlOutput_1 main ] start
								 */

								currentComponent = "tPostgresqlOutput_1";

								// insert_bp
								// insert_bp

								if (execStat) {
									runStat.updateStatOnConnection("insert_bp"
											+ iterateId, 1, 1);
								}

								whetherReject_tPostgresqlOutput_1 = false;
								pstmt_tPostgresqlOutput_1.setDouble(1,
										insert_bp.i_bpartner_id);

								java.sql.ResultSet rs_tPostgresqlOutput_1 = pstmt_tPostgresqlOutput_1
										.executeQuery();
								int checkCount_tPostgresqlOutput_1 = -1;
								while (rs_tPostgresqlOutput_1.next()) {
									checkCount_tPostgresqlOutput_1 = rs_tPostgresqlOutput_1
											.getInt(1);
								}
								if (checkCount_tPostgresqlOutput_1 > 0) {
									if (insert_bp.ad_client_id == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(1,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(1,
														insert_bp.ad_client_id);
									}

									if (insert_bp.ad_org_id == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(2,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(2,
														insert_bp.ad_org_id);
									}

									if (insert_bp.isactive == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(3,
														insert_bp.isactive);
									}

									if (insert_bp.created != null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setTimestamp(
														4,
														new java.sql.Timestamp(
																insert_bp.created
																		.getTime()));
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														4,
														java.sql.Types.TIMESTAMP);
									}

									if (insert_bp.createdby == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(5,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(5,
														insert_bp.createdby);
									}

									if (insert_bp.updated != null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setTimestamp(
														6,
														new java.sql.Timestamp(
																insert_bp.updated
																		.getTime()));
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														6,
														java.sql.Types.TIMESTAMP);
									}

									if (insert_bp.updatedby == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(7,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(7,
														insert_bp.updatedby);
									}

									if (insert_bp.i_isimported == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(8,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(8,
														insert_bp.i_isimported);
									}

									if (insert_bp.i_errormsg == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(9,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(9,
														insert_bp.i_errormsg);
									}

									if (insert_bp.c_bpartner_id == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(10,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(10,
														insert_bp.c_bpartner_id);
									}

									if (insert_bp.value == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(11,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(11, insert_bp.value);
									}

									if (insert_bp.name == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(12,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(12, insert_bp.name);
									}

									if (insert_bp.name2 == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(13,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(13, insert_bp.name2);
									}

									if (insert_bp.description == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(14,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(14,
														insert_bp.description);
									}

									if (insert_bp.duns == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(15,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(15, insert_bp.duns);
									}

									if (insert_bp.taxid == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(16,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(16, insert_bp.taxid);
									}

									if (insert_bp.naics == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(17,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(17, insert_bp.naics);
									}

									if (insert_bp.groupvalue == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(18,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(18,
														insert_bp.groupvalue);
									}

									if (insert_bp.c_bp_group_id == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(19,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(19,
														insert_bp.c_bp_group_id);
									}

									if (insert_bp.c_bpartner_location_id == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(20,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(
														20,
														insert_bp.c_bpartner_location_id);
									}

									if (insert_bp.address1 == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(21,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(21,
														insert_bp.address1);
									}

									if (insert_bp.address2 == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(22,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(22,
														insert_bp.address2);
									}

									if (insert_bp.postal == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(23,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(23, insert_bp.postal);
									}

									if (insert_bp.postal_add == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(24,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(24,
														insert_bp.postal_add);
									}

									if (insert_bp.city == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(25,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(25, insert_bp.city);
									}

									if (insert_bp.c_region_id == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(26,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(26,
														insert_bp.c_region_id);
									}

									if (insert_bp.regionname == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(27,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(27,
														insert_bp.regionname);
									}

									if (insert_bp.c_country_id == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(28,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(28,
														insert_bp.c_country_id);
									}

									if (insert_bp.countrycode == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(29,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(29,
														insert_bp.countrycode);
									}

									if (insert_bp.title == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(30,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(30, insert_bp.title);
									}

									if (insert_bp.contactname == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(31,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(31,
														insert_bp.contactname);
									}

									if (insert_bp.contactdescription == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(32,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														32,
														insert_bp.contactdescription);
									}

									if (insert_bp.comments == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(33,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(33,
														insert_bp.comments);
									}

									if (insert_bp.phone == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(34,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(34, insert_bp.phone);
									}

									if (insert_bp.phone2 == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(35,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(35, insert_bp.phone2);
									}

									if (insert_bp.fax == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(36,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(36, insert_bp.fax);
									}

									if (insert_bp.email == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(37,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(37, insert_bp.email);
									}

									if (insert_bp.password == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(38,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(38,
														insert_bp.password);
									}

									if (insert_bp.birthday != null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setTimestamp(
														39,
														new java.sql.Timestamp(
																insert_bp.birthday
																		.getTime()));
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														39,
														java.sql.Types.TIMESTAMP);
									}

									if (insert_bp.c_greeting_id == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(40,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(40,
														insert_bp.c_greeting_id);
									}

									if (insert_bp.bpcontactgreeting == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(41,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														41,
														insert_bp.bpcontactgreeting);
									}

									if (insert_bp.processing == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(42,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(42,
														insert_bp.processing);
									}

									if (insert_bp.processed == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(43,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(43,
														insert_bp.processed);
									}

									if (insert_bp.ad_user_id == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(44,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(44,
														insert_bp.ad_user_id);
									}

									if (insert_bp.r_interestarea_id == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(45,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(
														45,
														insert_bp.r_interestarea_id);
									}

									if (insert_bp.interestareaname == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(46,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														46,
														insert_bp.interestareaname);
									}

									if (insert_bp.iscustomer == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(47,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(47,
														insert_bp.iscustomer);
									}

									if (insert_bp.isemployee == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(48,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(48,
														insert_bp.isemployee);
									}

									if (insert_bp.isvendor == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(49,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(49,
														insert_bp.isvendor);
									}

									if (insert_bp.i_bpartner_uu == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(50,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(50,
														insert_bp.i_bpartner_uu);
									}

									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											51 + count_tPostgresqlOutput_1,
											insert_bp.i_bpartner_id);

									try {

										updatedCount_tPostgresqlOutput_1 = updatedCount_tPostgresqlOutput_1
												+ pstmtUpdate_tPostgresqlOutput_1
														.executeUpdate();
										nb_line_tPostgresqlOutput_1++;

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_1 = true;
										nb_line_tPostgresqlOutput_1++;
										System.err.print(e.getMessage());
									}
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											1, insert_bp.i_bpartner_id);

									if (insert_bp.ad_client_id == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(2,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(2,
														insert_bp.ad_client_id);
									}

									if (insert_bp.ad_org_id == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(3,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(3,
														insert_bp.ad_org_id);
									}

									if (insert_bp.isactive == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(4,
														insert_bp.isactive);
									}

									if (insert_bp.created != null) {
										pstmtInsert_tPostgresqlOutput_1
												.setTimestamp(
														5,
														new java.sql.Timestamp(
																insert_bp.created
																		.getTime()));
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(
														5,
														java.sql.Types.TIMESTAMP);
									}

									if (insert_bp.createdby == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(6,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(6,
														insert_bp.createdby);
									}

									if (insert_bp.updated != null) {
										pstmtInsert_tPostgresqlOutput_1
												.setTimestamp(
														7,
														new java.sql.Timestamp(
																insert_bp.updated
																		.getTime()));
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(
														7,
														java.sql.Types.TIMESTAMP);
									}

									if (insert_bp.updatedby == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(8,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(8,
														insert_bp.updatedby);
									}

									if (insert_bp.i_isimported == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(9,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(9,
														insert_bp.i_isimported);
									}

									if (insert_bp.i_errormsg == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(10,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(10,
														insert_bp.i_errormsg);
									}

									if (insert_bp.c_bpartner_id == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(11,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(11,
														insert_bp.c_bpartner_id);
									}

									if (insert_bp.value == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(12,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(12, insert_bp.value);
									}

									if (insert_bp.name == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(13,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(13, insert_bp.name);
									}

									if (insert_bp.name2 == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(14,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(14, insert_bp.name2);
									}

									if (insert_bp.description == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(15,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(15,
														insert_bp.description);
									}

									if (insert_bp.duns == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(16,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(16, insert_bp.duns);
									}

									if (insert_bp.taxid == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(17,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(17, insert_bp.taxid);
									}

									if (insert_bp.naics == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(18,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(18, insert_bp.naics);
									}

									if (insert_bp.groupvalue == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(19,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(19,
														insert_bp.groupvalue);
									}

									if (insert_bp.c_bp_group_id == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(20,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(20,
														insert_bp.c_bp_group_id);
									}

									if (insert_bp.c_bpartner_location_id == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(21,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(
														21,
														insert_bp.c_bpartner_location_id);
									}

									if (insert_bp.address1 == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(22,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(22,
														insert_bp.address1);
									}

									if (insert_bp.address2 == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(23,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(23,
														insert_bp.address2);
									}

									if (insert_bp.postal == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(24,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(24, insert_bp.postal);
									}

									if (insert_bp.postal_add == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(25,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(25,
														insert_bp.postal_add);
									}

									if (insert_bp.city == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(26,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(26, insert_bp.city);
									}

									if (insert_bp.c_region_id == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(27,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(27,
														insert_bp.c_region_id);
									}

									if (insert_bp.regionname == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(28,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(28,
														insert_bp.regionname);
									}

									if (insert_bp.c_country_id == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(29,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(29,
														insert_bp.c_country_id);
									}

									if (insert_bp.countrycode == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(30,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(30,
														insert_bp.countrycode);
									}

									if (insert_bp.title == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(31,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(31, insert_bp.title);
									}

									if (insert_bp.contactname == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(32,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(32,
														insert_bp.contactname);
									}

									if (insert_bp.contactdescription == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(33,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(
														33,
														insert_bp.contactdescription);
									}

									if (insert_bp.comments == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(34,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(34,
														insert_bp.comments);
									}

									if (insert_bp.phone == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(35,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(35, insert_bp.phone);
									}

									if (insert_bp.phone2 == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(36,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(36, insert_bp.phone2);
									}

									if (insert_bp.fax == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(37,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(37, insert_bp.fax);
									}

									if (insert_bp.email == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(38,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(38, insert_bp.email);
									}

									if (insert_bp.password == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(39,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(39,
														insert_bp.password);
									}

									if (insert_bp.birthday != null) {
										pstmtInsert_tPostgresqlOutput_1
												.setTimestamp(
														40,
														new java.sql.Timestamp(
																insert_bp.birthday
																		.getTime()));
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(
														40,
														java.sql.Types.TIMESTAMP);
									}

									if (insert_bp.c_greeting_id == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(41,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(41,
														insert_bp.c_greeting_id);
									}

									if (insert_bp.bpcontactgreeting == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(42,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(
														42,
														insert_bp.bpcontactgreeting);
									}

									if (insert_bp.processing == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(43,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(43,
														insert_bp.processing);
									}

									if (insert_bp.processed == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(44,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(44,
														insert_bp.processed);
									}

									if (insert_bp.ad_user_id == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(45,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(45,
														insert_bp.ad_user_id);
									}

									if (insert_bp.r_interestarea_id == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(46,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(
														46,
														insert_bp.r_interestarea_id);
									}

									if (insert_bp.interestareaname == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(47,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(
														47,
														insert_bp.interestareaname);
									}

									if (insert_bp.iscustomer == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(48,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(48,
														insert_bp.iscustomer);
									}

									if (insert_bp.isemployee == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(49,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(49,
														insert_bp.isemployee);
									}

									if (insert_bp.isvendor == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(50,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(50,
														insert_bp.isvendor);
									}

									if (insert_bp.i_bpartner_uu == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(51,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(51,
														insert_bp.i_bpartner_uu);
									}

									try {

										insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
												+ pstmtInsert_tPostgresqlOutput_1
														.executeUpdate();
										nb_line_tPostgresqlOutput_1++;

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_1 = true;
										nb_line_tPostgresqlOutput_1++;
										System.err.print(e.getMessage());
									}
								}
								commitCounter_tPostgresqlOutput_1++;
								if (commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
									conn_tPostgresqlOutput_1.commit();

									commitCounter_tPostgresqlOutput_1 = 0;
								}

								tos_count_tPostgresqlOutput_1++;

								/**
								 * [tPostgresqlOutput_1 main ] stop
								 */

							} // End of branch "insert_bp"

						} // G_TM_M_280 close main tMap filter for table 'row1'

						/**
						 * [tAccessInput_1 end ] start
						 */

						currentComponent = "tAccessInput_1";

					}
				} finally {
					stmt_tAccessInput_1.close();

					if (conn_tAccessInput_1 != null
							&& !conn_tAccessInput_1.isClosed()) {

						conn_tAccessInput_1.close();

					}
				}
				globalMap.put("tAccessInput_1_NB_LINE", nb_line_tAccessInput_1);

				ok_Hash.put("tAccessInput_1", true);
				end_Hash.put("tAccessInput_1", System.currentTimeMillis());

				/**
				 * [tAccessInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmtUpdate_tPostgresqlOutput_1 != null) {
					pstmtUpdate_tPostgresqlOutput_1.close();
				}
				if (pstmtInsert_tPostgresqlOutput_1 != null) {
					pstmtInsert_tPostgresqlOutput_1.close();
				}
				if (pstmt_tPostgresqlOutput_1 != null) {
					pstmt_tPostgresqlOutput_1.close();
				}

				conn_tPostgresqlOutput_1.commit();

				conn_tPostgresqlOutput_1.close();

				resourceMap.put("finish_tPostgresqlOutput_1", true);

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("insert_bp" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tAccessInput_1 finally ] start
				 */

				currentComponent = "tAccessInput_1";

				/**
				 * [tAccessInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (resourceMap.get("finish_tPostgresqlOutput_1") == null) {
					if (resourceMap.get("conn_tPostgresqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tPostgresqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
							String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :"
									+ sqlEx_tPostgresqlOutput_1.getMessage();

							System.err
									.println(errorMessage_tPostgresqlOutput_1);
						}
					}
				}

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAccessInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_GToI_ImportBP = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String AT01CP;

		public String getAT01CP() {
			return this.AT01CP;
		}

		public Float DT01CP;

		public Float getDT01CP() {
			return this.DT01CP;
		}

		public Float NR01CP;

		public Float getNR01CP() {
			return this.NR01CP;
		}

		public String CDDTCP;

		public String getCDDTCP() {
			return this.CDDTCP;
		}

		public String CONTCP;

		public String getCONTCP() {
			return this.CONTCP;
		}

		public String SIGLCP;

		public String getSIGLCP() {
			return this.SIGLCP;
		}

		public String DSCOCP;

		public String getDSCOCP() {
			return this.DSCOCP;
		}

		public String DSULCP;

		public String getDSULCP() {
			return this.DSULCP;
		}

		public String TPCOCP;

		public String getTPCOCP() {
			return this.TPCOCP;
		}

		public String GESTCP;

		public String getGESTCP() {
			return this.GESTCP;
		}

		public String PAAPCP;

		public String getPAAPCP() {
			return this.PAAPCP;
		}

		public String CCTPCP;

		public String getCCTPCP() {
			return this.CCTPCP;
		}

		public String CLFOCP;

		public String getCLFOCP() {
			return this.CLFOCP;
		}

		public Float INDECP;

		public Float getINDECP() {
			return this.INDECP;
		}

		public Float DETRCP;

		public Float getDETRCP() {
			return this.DETRCP;
		}

		public String CZCOCP;

		public String getCZCOCP() {
			return this.CZCOCP;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.CONTCP == null) ? 0 : this.CONTCP.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.CONTCP == null) {
				if (other.CONTCP != null)
					return false;

			} else if (!this.CONTCP.equals(other.CONTCP))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.AT01CP = this.AT01CP;
			other.DT01CP = this.DT01CP;
			other.NR01CP = this.NR01CP;
			other.CDDTCP = this.CDDTCP;
			other.CONTCP = this.CONTCP;
			other.SIGLCP = this.SIGLCP;
			other.DSCOCP = this.DSCOCP;
			other.DSULCP = this.DSULCP;
			other.TPCOCP = this.TPCOCP;
			other.GESTCP = this.GESTCP;
			other.PAAPCP = this.PAAPCP;
			other.CCTPCP = this.CCTPCP;
			other.CLFOCP = this.CLFOCP;
			other.INDECP = this.INDECP;
			other.DETRCP = this.DETRCP;
			other.CZCOCP = this.CZCOCP;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.CONTCP = this.CONTCP;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_GToI_ImportBP.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_GToI_ImportBP.length == 0) {
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_GToI_ImportBP, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_GToI_ImportBP, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_GToI_ImportBP) {

				try {

					int length = 0;

					this.CONTCP = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONTCP, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.AT01CP = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.DT01CP = null;
				} else {
					this.DT01CP = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.NR01CP = null;
				} else {
					this.NR01CP = dis.readFloat();
				}

				this.CDDTCP = readString(dis, ois);

				this.SIGLCP = readString(dis, ois);

				this.DSCOCP = readString(dis, ois);

				this.DSULCP = readString(dis, ois);

				this.TPCOCP = readString(dis, ois);

				this.GESTCP = readString(dis, ois);

				this.PAAPCP = readString(dis, ois);

				this.CCTPCP = readString(dis, ois);

				this.CLFOCP = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.INDECP = null;
				} else {
					this.INDECP = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.DETRCP = null;
				} else {
					this.DETRCP = dis.readFloat();
				}

				this.CZCOCP = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.AT01CP, dos, oos);

				if (this.DT01CP == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DT01CP);
				}

				if (this.NR01CP == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NR01CP);
				}

				writeString(this.CDDTCP, dos, oos);

				writeString(this.SIGLCP, dos, oos);

				writeString(this.DSCOCP, dos, oos);

				writeString(this.DSULCP, dos, oos);

				writeString(this.TPCOCP, dos, oos);

				writeString(this.GESTCP, dos, oos);

				writeString(this.PAAPCP, dos, oos);

				writeString(this.CCTPCP, dos, oos);

				writeString(this.CLFOCP, dos, oos);

				if (this.INDECP == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.INDECP);
				}

				if (this.DETRCP == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DETRCP);
				}

				writeString(this.CZCOCP, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AT01CP=" + AT01CP);
			sb.append(",DT01CP=" + String.valueOf(DT01CP));
			sb.append(",NR01CP=" + String.valueOf(NR01CP));
			sb.append(",CDDTCP=" + CDDTCP);
			sb.append(",CONTCP=" + CONTCP);
			sb.append(",SIGLCP=" + SIGLCP);
			sb.append(",DSCOCP=" + DSCOCP);
			sb.append(",DSULCP=" + DSULCP);
			sb.append(",TPCOCP=" + TPCOCP);
			sb.append(",GESTCP=" + GESTCP);
			sb.append(",PAAPCP=" + PAAPCP);
			sb.append(",CCTPCP=" + CCTPCP);
			sb.append(",CLFOCP=" + CLFOCP);
			sb.append(",INDECP=" + String.valueOf(INDECP));
			sb.append(",DETRCP=" + String.valueOf(DETRCP));
			sb.append(",CZCOCP=" + CZCOCP);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONTCP, other.CONTCP);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAccessInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAccessInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tAccessInput_2 - inputs:(after_tAccessInput_1)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2) outputs:(insert_bp)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tAccessInput_2 begin ] start
				 */

				ok_Hash.put("tAccessInput_2", false);
				start_Hash.put("tAccessInput_2", System.currentTimeMillis());

				currentComponent = "tAccessInput_2";

				int tos_count_tAccessInput_2 = 0;

				int nb_line_tAccessInput_2 = 0;
				java.sql.Connection conn_tAccessInput_2 = null;
				String driverClass_tAccessInput_2 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tAccessInput_2);

				String url_tAccessInput_2 = "jdbc:ucanaccess://"
						+ "/home/luxguru88/Scrivania/as400_r0.mdb";
				String dbUser_tAccessInput_2 = "";

				final String decryptedPassword_tAccessInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tAccessInput_2 = decryptedPassword_tAccessInput_2;

				String atnParams_tAccessInput_2 = "memory=false";
				atnParams_tAccessInput_2 = atnParams_tAccessInput_2.replaceAll(
						"&", "\n");
				java.util.Properties atnParamsPrope_tAccessInput_2 = new java.util.Properties();
				atnParamsPrope_tAccessInput_2
						.put("user", dbUser_tAccessInput_2);
				atnParamsPrope_tAccessInput_2.put("password",
						dbPwd_tAccessInput_2);
				atnParamsPrope_tAccessInput_2
						.load(new java.io.ByteArrayInputStream(
								atnParams_tAccessInput_2.getBytes()));
				conn_tAccessInput_2 = java.sql.DriverManager.getConnection(
						url_tAccessInput_2, atnParamsPrope_tAccessInput_2);

				java.sql.Statement stmt_tAccessInput_2 = conn_tAccessInput_2
						.createStatement();

				String dbquery_tAccessInput_2 = "SELECT \n  ZCGPCO.AT01CP, \n  ZCGPCO.DT01CP, \n  ZCGPCO.NR01CP, \n  ZCGPCO.CDDTCP, \n  ZCGPCO.CONTCP, \n  ZCGPCO.SIGLCP, \n  ZCGPCO.DSCOCP, \n  ZCGPCO.DSULCP, \n  ZCGPCO.TPCOCP, \n  ZCGPCO.GESTCP, \n  ZCGPCO.PAAPCP, \n  ZCGPCO.CCTPCP, \n  ZCGPCO.CLFOCP, \n  ZCGPCO.INDECP, \n  ZCGPCO.DETRCP, \n  ZCGPCO.CZCOCP\nFROM ZCGPCO";

				globalMap.put("tAccessInput_2_QUERY", dbquery_tAccessInput_2);

				java.sql.ResultSet rs_tAccessInput_2 = null;
				try {
					rs_tAccessInput_2 = stmt_tAccessInput_2
							.executeQuery(dbquery_tAccessInput_2);
					java.sql.ResultSetMetaData rsmd_tAccessInput_2 = rs_tAccessInput_2
							.getMetaData();
					int colQtyInRs_tAccessInput_2 = rsmd_tAccessInput_2
							.getColumnCount();

					String tmpContent_tAccessInput_2 = null;

					while (rs_tAccessInput_2.next()) {
						nb_line_tAccessInput_2++;

						if (colQtyInRs_tAccessInput_2 < 1) {
							row2.AT01CP = null;
						} else {

							row2.AT01CP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 1, false);
						}
						if (colQtyInRs_tAccessInput_2 < 2) {
							row2.DT01CP = null;
						} else {

							if (rs_tAccessInput_2.getObject(2) != null) {
								row2.DT01CP = rs_tAccessInput_2.getFloat(2);
							} else {
								row2.DT01CP = null;
							}
						}
						if (colQtyInRs_tAccessInput_2 < 3) {
							row2.NR01CP = null;
						} else {

							if (rs_tAccessInput_2.getObject(3) != null) {
								row2.NR01CP = rs_tAccessInput_2.getFloat(3);
							} else {
								row2.NR01CP = null;
							}
						}
						if (colQtyInRs_tAccessInput_2 < 4) {
							row2.CDDTCP = null;
						} else {

							row2.CDDTCP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 4, false);
						}
						if (colQtyInRs_tAccessInput_2 < 5) {
							row2.CONTCP = null;
						} else {

							row2.CONTCP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 5, false);
						}
						if (colQtyInRs_tAccessInput_2 < 6) {
							row2.SIGLCP = null;
						} else {

							row2.SIGLCP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 6, false);
						}
						if (colQtyInRs_tAccessInput_2 < 7) {
							row2.DSCOCP = null;
						} else {

							row2.DSCOCP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 7, false);
						}
						if (colQtyInRs_tAccessInput_2 < 8) {
							row2.DSULCP = null;
						} else {

							row2.DSULCP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 8, false);
						}
						if (colQtyInRs_tAccessInput_2 < 9) {
							row2.TPCOCP = null;
						} else {

							row2.TPCOCP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 9, false);
						}
						if (colQtyInRs_tAccessInput_2 < 10) {
							row2.GESTCP = null;
						} else {

							row2.GESTCP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 10, false);
						}
						if (colQtyInRs_tAccessInput_2 < 11) {
							row2.PAAPCP = null;
						} else {

							row2.PAAPCP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 11, false);
						}
						if (colQtyInRs_tAccessInput_2 < 12) {
							row2.CCTPCP = null;
						} else {

							row2.CCTPCP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 12, false);
						}
						if (colQtyInRs_tAccessInput_2 < 13) {
							row2.CLFOCP = null;
						} else {

							row2.CLFOCP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 13, false);
						}
						if (colQtyInRs_tAccessInput_2 < 14) {
							row2.INDECP = null;
						} else {

							if (rs_tAccessInput_2.getObject(14) != null) {
								row2.INDECP = rs_tAccessInput_2.getFloat(14);
							} else {
								row2.INDECP = null;
							}
						}
						if (colQtyInRs_tAccessInput_2 < 15) {
							row2.DETRCP = null;
						} else {

							if (rs_tAccessInput_2.getObject(15) != null) {
								row2.DETRCP = rs_tAccessInput_2.getFloat(15);
							} else {
								row2.DETRCP = null;
							}
						}
						if (colQtyInRs_tAccessInput_2 < 16) {
							row2.CZCOCP = null;
						} else {

							row2.CZCOCP = routines.system.JDBCUtil.getString(
									rs_tAccessInput_2, 16, false);
						}

						/**
						 * [tAccessInput_2 begin ] stop
						 */

						/**
						 * [tAccessInput_2 main ] start
						 */

						currentComponent = "tAccessInput_2";

						tos_count_tAccessInput_2++;

						/**
						 * [tAccessInput_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.AT01CP = row2.AT01CP;

						row2_HashRow.DT01CP = row2.DT01CP;

						row2_HashRow.NR01CP = row2.NR01CP;

						row2_HashRow.CDDTCP = row2.CDDTCP;

						row2_HashRow.CONTCP = row2.CONTCP;

						row2_HashRow.SIGLCP = row2.SIGLCP;

						row2_HashRow.DSCOCP = row2.DSCOCP;

						row2_HashRow.DSULCP = row2.DSULCP;

						row2_HashRow.TPCOCP = row2.TPCOCP;

						row2_HashRow.GESTCP = row2.GESTCP;

						row2_HashRow.PAAPCP = row2.PAAPCP;

						row2_HashRow.CCTPCP = row2.CCTPCP;

						row2_HashRow.CLFOCP = row2.CLFOCP;

						row2_HashRow.INDECP = row2.INDECP;

						row2_HashRow.DETRCP = row2.DETRCP;

						row2_HashRow.CZCOCP = row2.CZCOCP;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAccessInput_2 end ] start
						 */

						currentComponent = "tAccessInput_2";

					}
				} finally {
					stmt_tAccessInput_2.close();

					if (conn_tAccessInput_2 != null
							&& !conn_tAccessInput_2.isClosed()) {

						conn_tAccessInput_2.close();

					}
				}
				globalMap.put("tAccessInput_2_NB_LINE", nb_line_tAccessInput_2);

				ok_Hash.put("tAccessInput_2", true);
				end_Hash.put("tAccessInput_2", System.currentTimeMillis());

				/**
				 * [tAccessInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tAccessInput_2 finally ] start
				 */

				currentComponent = "tAccessInput_2";

				/**
				 * [tAccessInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAccessInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final GToI_ImportBP GToI_ImportBPClass = new GToI_ImportBP();

		int exitCode = GToI_ImportBPClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = GToI_ImportBP.class
					.getClassLoader().getResourceAsStream(
							"local_project/gtoi_importbp_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tAccessInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tAccessInput_1) {
			globalMap.put("tAccessInput_1_SUBPROCESS_STATE", -1);

			e_tAccessInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : GToI_ImportBP");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 188276 characters generated by Talend Open Studio for Data Integration on the
 * 16 giugno 2016 14.35.12 CEST
 ************************************************************************************************/
