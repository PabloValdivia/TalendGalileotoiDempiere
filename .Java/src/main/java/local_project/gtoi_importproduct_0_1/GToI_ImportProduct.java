// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.gtoi_importproduct_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: GToI_ImportProduct Purpose: GToI_ImportProduct<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class GToI_ImportProduct implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "GToI_ImportProduct";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					GToI_ImportProduct.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(GToI_ImportProduct.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tAccessInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAccessInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAccessInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAccessInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAccessInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class insert_i_productStruct implements
			routines.system.IPersistableRow<insert_i_productStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_GToI_ImportProduct = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public double i_product_id;

		public double getI_product_id() {
			return this.i_product_id;
		}

		public Double ad_client_id;

		public Double getAd_client_id() {
			return this.ad_client_id;
		}

		public Double ad_org_id;

		public Double getAd_org_id() {
			return this.ad_org_id;
		}

		public String isactive;

		public String getIsactive() {
			return this.isactive;
		}

		public java.util.Date created;

		public java.util.Date getCreated() {
			return this.created;
		}

		public Double createdby;

		public Double getCreatedby() {
			return this.createdby;
		}

		public java.util.Date updated;

		public java.util.Date getUpdated() {
			return this.updated;
		}

		public Double updatedby;

		public Double getUpdatedby() {
			return this.updatedby;
		}

		public String i_isimported;

		public String getI_isimported() {
			return this.i_isimported;
		}

		public String i_errormsg;

		public String getI_errormsg() {
			return this.i_errormsg;
		}

		public Double m_product_id;

		public Double getM_product_id() {
			return this.m_product_id;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String documentnote;

		public String getDocumentnote() {
			return this.documentnote;
		}

		public String help;

		public String getHelp() {
			return this.help;
		}

		public String upc;

		public String getUpc() {
			return this.upc;
		}

		public String sku;

		public String getSku() {
			return this.sku;
		}

		public String x12de355;

		public String getX12de355() {
			return this.x12de355;
		}

		public Double c_uom_id;

		public Double getC_uom_id() {
			return this.c_uom_id;
		}

		public String productcategory_value;

		public String getProductcategory_value() {
			return this.productcategory_value;
		}

		public Double m_product_category_id;

		public Double getM_product_category_id() {
			return this.m_product_category_id;
		}

		public String producttype;

		public String getProducttype() {
			return this.producttype;
		}

		public String classification;

		public String getClassification() {
			return this.classification;
		}

		public Double volume;

		public Double getVolume() {
			return this.volume;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public Double shelfwidth;

		public Double getShelfwidth() {
			return this.shelfwidth;
		}

		public Double shelfheight;

		public Double getShelfheight() {
			return this.shelfheight;
		}

		public Double shelfdepth;

		public Double getShelfdepth() {
			return this.shelfdepth;
		}

		public Double unitsperpallet;

		public Double getUnitsperpallet() {
			return this.unitsperpallet;
		}

		public String discontinued;

		public String getDiscontinued() {
			return this.discontinued;
		}

		public java.util.Date discontinuedby;

		public java.util.Date getDiscontinuedby() {
			return this.discontinuedby;
		}

		public String imageurl;

		public String getImageurl() {
			return this.imageurl;
		}

		public String descriptionurl;

		public String getDescriptionurl() {
			return this.descriptionurl;
		}

		public String bpartner_value;

		public String getBpartner_value() {
			return this.bpartner_value;
		}

		public Double c_bpartner_id;

		public Double getC_bpartner_id() {
			return this.c_bpartner_id;
		}

		public String iso_code;

		public String getIso_code() {
			return this.iso_code;
		}

		public Double c_currency_id;

		public Double getC_currency_id() {
			return this.c_currency_id;
		}

		public Double pricelist;

		public Double getPricelist() {
			return this.pricelist;
		}

		public Double pricepo;

		public Double getPricepo() {
			return this.pricepo;
		}

		public Double royaltyamt;

		public Double getRoyaltyamt() {
			return this.royaltyamt;
		}

		public java.util.Date priceeffective;

		public java.util.Date getPriceeffective() {
			return this.priceeffective;
		}

		public String vendorproductno;

		public String getVendorproductno() {
			return this.vendorproductno;
		}

		public String vendorcategory;

		public String getVendorcategory() {
			return this.vendorcategory;
		}

		public String manufacturer;

		public String getManufacturer() {
			return this.manufacturer;
		}

		public Double order_min;

		public Double getOrder_min() {
			return this.order_min;
		}

		public Double order_pack;

		public Double getOrder_pack() {
			return this.order_pack;
		}

		public Double costperorder;

		public Double getCostperorder() {
			return this.costperorder;
		}

		public Double deliverytime_promised;

		public Double getDeliverytime_promised() {
			return this.deliverytime_promised;
		}

		public String processing;

		public String getProcessing() {
			return this.processing;
		}

		public String processed;

		public String getProcessed() {
			return this.processed;
		}

		public Double pricestd;

		public Double getPricestd() {
			return this.pricestd;
		}

		public Double pricelimit;

		public Double getPricelimit() {
			return this.pricelimit;
		}

		public java.util.Date discontinuedat;

		public java.util.Date getDiscontinuedat() {
			return this.discontinuedat;
		}

		public Double i_product_uu;

		public Double getI_product_uu() {
			return this.i_product_uu;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.i_product_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final insert_i_productStruct other = (insert_i_productStruct) obj;

			if (this.i_product_id != other.i_product_id)
				return false;

			return true;
		}

		public void copyDataTo(insert_i_productStruct other) {

			other.i_product_id = this.i_product_id;
			other.ad_client_id = this.ad_client_id;
			other.ad_org_id = this.ad_org_id;
			other.isactive = this.isactive;
			other.created = this.created;
			other.createdby = this.createdby;
			other.updated = this.updated;
			other.updatedby = this.updatedby;
			other.i_isimported = this.i_isimported;
			other.i_errormsg = this.i_errormsg;
			other.m_product_id = this.m_product_id;
			other.value = this.value;
			other.name = this.name;
			other.description = this.description;
			other.documentnote = this.documentnote;
			other.help = this.help;
			other.upc = this.upc;
			other.sku = this.sku;
			other.x12de355 = this.x12de355;
			other.c_uom_id = this.c_uom_id;
			other.productcategory_value = this.productcategory_value;
			other.m_product_category_id = this.m_product_category_id;
			other.producttype = this.producttype;
			other.classification = this.classification;
			other.volume = this.volume;
			other.weight = this.weight;
			other.shelfwidth = this.shelfwidth;
			other.shelfheight = this.shelfheight;
			other.shelfdepth = this.shelfdepth;
			other.unitsperpallet = this.unitsperpallet;
			other.discontinued = this.discontinued;
			other.discontinuedby = this.discontinuedby;
			other.imageurl = this.imageurl;
			other.descriptionurl = this.descriptionurl;
			other.bpartner_value = this.bpartner_value;
			other.c_bpartner_id = this.c_bpartner_id;
			other.iso_code = this.iso_code;
			other.c_currency_id = this.c_currency_id;
			other.pricelist = this.pricelist;
			other.pricepo = this.pricepo;
			other.royaltyamt = this.royaltyamt;
			other.priceeffective = this.priceeffective;
			other.vendorproductno = this.vendorproductno;
			other.vendorcategory = this.vendorcategory;
			other.manufacturer = this.manufacturer;
			other.order_min = this.order_min;
			other.order_pack = this.order_pack;
			other.costperorder = this.costperorder;
			other.deliverytime_promised = this.deliverytime_promised;
			other.processing = this.processing;
			other.processed = this.processed;
			other.pricestd = this.pricestd;
			other.pricelimit = this.pricelimit;
			other.discontinuedat = this.discontinuedat;
			other.i_product_uu = this.i_product_uu;

		}

		public void copyKeysDataTo(insert_i_productStruct other) {

			other.i_product_id = this.i_product_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_GToI_ImportProduct.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_GToI_ImportProduct.length == 0) {
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_GToI_ImportProduct,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_GToI_ImportProduct) {

				try {

					int length = 0;

					this.i_product_id = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.ad_client_id = null;
					} else {
						this.ad_client_id = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ad_org_id = null;
					} else {
						this.ad_org_id = dis.readDouble();
					}

					this.isactive = readString(dis);

					this.created = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.createdby = null;
					} else {
						this.createdby = dis.readDouble();
					}

					this.updated = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.updatedby = null;
					} else {
						this.updatedby = dis.readDouble();
					}

					this.i_isimported = readString(dis);

					this.i_errormsg = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.m_product_id = null;
					} else {
						this.m_product_id = dis.readDouble();
					}

					this.value = readString(dis);

					this.name = readString(dis);

					this.description = readString(dis);

					this.documentnote = readString(dis);

					this.help = readString(dis);

					this.upc = readString(dis);

					this.sku = readString(dis);

					this.x12de355 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.c_uom_id = null;
					} else {
						this.c_uom_id = dis.readDouble();
					}

					this.productcategory_value = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.m_product_category_id = null;
					} else {
						this.m_product_category_id = dis.readDouble();
					}

					this.producttype = readString(dis);

					this.classification = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.volume = null;
					} else {
						this.volume = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.shelfwidth = null;
					} else {
						this.shelfwidth = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.shelfheight = null;
					} else {
						this.shelfheight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.shelfdepth = null;
					} else {
						this.shelfdepth = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.unitsperpallet = null;
					} else {
						this.unitsperpallet = dis.readDouble();
					}

					this.discontinued = readString(dis);

					this.discontinuedby = readDate(dis);

					this.imageurl = readString(dis);

					this.descriptionurl = readString(dis);

					this.bpartner_value = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.c_bpartner_id = null;
					} else {
						this.c_bpartner_id = dis.readDouble();
					}

					this.iso_code = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.c_currency_id = null;
					} else {
						this.c_currency_id = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pricelist = null;
					} else {
						this.pricelist = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pricepo = null;
					} else {
						this.pricepo = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.royaltyamt = null;
					} else {
						this.royaltyamt = dis.readDouble();
					}

					this.priceeffective = readDate(dis);

					this.vendorproductno = readString(dis);

					this.vendorcategory = readString(dis);

					this.manufacturer = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.order_min = null;
					} else {
						this.order_min = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.order_pack = null;
					} else {
						this.order_pack = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costperorder = null;
					} else {
						this.costperorder = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.deliverytime_promised = null;
					} else {
						this.deliverytime_promised = dis.readDouble();
					}

					this.processing = readString(dis);

					this.processed = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.pricestd = null;
					} else {
						this.pricestd = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pricelimit = null;
					} else {
						this.pricelimit = dis.readDouble();
					}

					this.discontinuedat = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.i_product_uu = null;
					} else {
						this.i_product_uu = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.i_product_id);

				// Double

				if (this.ad_client_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ad_client_id);
				}

				// Double

				if (this.ad_org_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ad_org_id);
				}

				// String

				writeString(this.isactive, dos);

				// java.util.Date

				writeDate(this.created, dos);

				// Double

				if (this.createdby == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.createdby);
				}

				// java.util.Date

				writeDate(this.updated, dos);

				// Double

				if (this.updatedby == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.updatedby);
				}

				// String

				writeString(this.i_isimported, dos);

				// String

				writeString(this.i_errormsg, dos);

				// Double

				if (this.m_product_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.m_product_id);
				}

				// String

				writeString(this.value, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.documentnote, dos);

				// String

				writeString(this.help, dos);

				// String

				writeString(this.upc, dos);

				// String

				writeString(this.sku, dos);

				// String

				writeString(this.x12de355, dos);

				// Double

				if (this.c_uom_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.c_uom_id);
				}

				// String

				writeString(this.productcategory_value, dos);

				// Double

				if (this.m_product_category_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.m_product_category_id);
				}

				// String

				writeString(this.producttype, dos);

				// String

				writeString(this.classification, dos);

				// Double

				if (this.volume == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.volume);
				}

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// Double

				if (this.shelfwidth == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.shelfwidth);
				}

				// Double

				if (this.shelfheight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.shelfheight);
				}

				// Double

				if (this.shelfdepth == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.shelfdepth);
				}

				// Double

				if (this.unitsperpallet == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.unitsperpallet);
				}

				// String

				writeString(this.discontinued, dos);

				// java.util.Date

				writeDate(this.discontinuedby, dos);

				// String

				writeString(this.imageurl, dos);

				// String

				writeString(this.descriptionurl, dos);

				// String

				writeString(this.bpartner_value, dos);

				// Double

				if (this.c_bpartner_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.c_bpartner_id);
				}

				// String

				writeString(this.iso_code, dos);

				// Double

				if (this.c_currency_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.c_currency_id);
				}

				// Double

				if (this.pricelist == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pricelist);
				}

				// Double

				if (this.pricepo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pricepo);
				}

				// Double

				if (this.royaltyamt == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.royaltyamt);
				}

				// java.util.Date

				writeDate(this.priceeffective, dos);

				// String

				writeString(this.vendorproductno, dos);

				// String

				writeString(this.vendorcategory, dos);

				// String

				writeString(this.manufacturer, dos);

				// Double

				if (this.order_min == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.order_min);
				}

				// Double

				if (this.order_pack == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.order_pack);
				}

				// Double

				if (this.costperorder == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.costperorder);
				}

				// Double

				if (this.deliverytime_promised == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.deliverytime_promised);
				}

				// String

				writeString(this.processing, dos);

				// String

				writeString(this.processed, dos);

				// Double

				if (this.pricestd == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pricestd);
				}

				// Double

				if (this.pricelimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pricelimit);
				}

				// java.util.Date

				writeDate(this.discontinuedat, dos);

				// Double

				if (this.i_product_uu == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.i_product_uu);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("i_product_id=" + String.valueOf(i_product_id));
			sb.append(",ad_client_id=" + String.valueOf(ad_client_id));
			sb.append(",ad_org_id=" + String.valueOf(ad_org_id));
			sb.append(",isactive=" + isactive);
			sb.append(",created=" + String.valueOf(created));
			sb.append(",createdby=" + String.valueOf(createdby));
			sb.append(",updated=" + String.valueOf(updated));
			sb.append(",updatedby=" + String.valueOf(updatedby));
			sb.append(",i_isimported=" + i_isimported);
			sb.append(",i_errormsg=" + i_errormsg);
			sb.append(",m_product_id=" + String.valueOf(m_product_id));
			sb.append(",value=" + value);
			sb.append(",name=" + name);
			sb.append(",description=" + description);
			sb.append(",documentnote=" + documentnote);
			sb.append(",help=" + help);
			sb.append(",upc=" + upc);
			sb.append(",sku=" + sku);
			sb.append(",x12de355=" + x12de355);
			sb.append(",c_uom_id=" + String.valueOf(c_uom_id));
			sb.append(",productcategory_value=" + productcategory_value);
			sb.append(",m_product_category_id="
					+ String.valueOf(m_product_category_id));
			sb.append(",producttype=" + producttype);
			sb.append(",classification=" + classification);
			sb.append(",volume=" + String.valueOf(volume));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",shelfwidth=" + String.valueOf(shelfwidth));
			sb.append(",shelfheight=" + String.valueOf(shelfheight));
			sb.append(",shelfdepth=" + String.valueOf(shelfdepth));
			sb.append(",unitsperpallet=" + String.valueOf(unitsperpallet));
			sb.append(",discontinued=" + discontinued);
			sb.append(",discontinuedby=" + String.valueOf(discontinuedby));
			sb.append(",imageurl=" + imageurl);
			sb.append(",descriptionurl=" + descriptionurl);
			sb.append(",bpartner_value=" + bpartner_value);
			sb.append(",c_bpartner_id=" + String.valueOf(c_bpartner_id));
			sb.append(",iso_code=" + iso_code);
			sb.append(",c_currency_id=" + String.valueOf(c_currency_id));
			sb.append(",pricelist=" + String.valueOf(pricelist));
			sb.append(",pricepo=" + String.valueOf(pricepo));
			sb.append(",royaltyamt=" + String.valueOf(royaltyamt));
			sb.append(",priceeffective=" + String.valueOf(priceeffective));
			sb.append(",vendorproductno=" + vendorproductno);
			sb.append(",vendorcategory=" + vendorcategory);
			sb.append(",manufacturer=" + manufacturer);
			sb.append(",order_min=" + String.valueOf(order_min));
			sb.append(",order_pack=" + String.valueOf(order_pack));
			sb.append(",costperorder=" + String.valueOf(costperorder));
			sb.append(",deliverytime_promised="
					+ String.valueOf(deliverytime_promised));
			sb.append(",processing=" + processing);
			sb.append(",processed=" + processed);
			sb.append(",pricestd=" + String.valueOf(pricestd));
			sb.append(",pricelimit=" + String.valueOf(pricelimit));
			sb.append(",discontinuedat=" + String.valueOf(discontinuedat));
			sb.append(",i_product_uu=" + String.valueOf(i_product_uu));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_i_productStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.i_product_id,
					other.i_product_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_GToI_ImportProduct = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[0];

		public String TIREMA;

		public String getTIREMA() {
			return this.TIREMA;
		}

		public String PROFMA;

		public String getPROFMA() {
			return this.PROFMA;
		}

		public String DT01MA;

		public String getDT01MA() {
			return this.DT01MA;
		}

		public Float DTMNMA;

		public Float getDTMNMA() {
			return this.DTMNMA;
		}

		public String CDDTMA;

		public String getCDDTMA() {
			return this.CDDTMA;
		}

		public String CDARMA;

		public String getCDARMA() {
			return this.CDARMA;
		}

		public String SIGLMA;

		public String getSIGLMA() {
			return this.SIGLMA;
		}

		public String DSARMA;

		public String getDSARMA() {
			return this.DSARMA;
		}

		public String DSSAMA;

		public String getDSSAMA() {
			return this.DSSAMA;
		}

		public String UMBAMA;

		public String getUMBAMA() {
			return this.UMBAMA;
		}

		public String UMALMA;

		public String getUMALMA() {
			return this.UMALMA;
		}

		public Float COEFMA;

		public Float getCOEFMA() {
			return this.COEFMA;
		}

		public String FOABMA;

		public String getFOABMA() {
			return this.FOABMA;
		}

		public Float CSBCMA;

		public Float getCSBCMA() {
			return this.CSBCMA;
		}

		public Float CSBAMA;

		public Float getCSBAMA() {
			return this.CSBAMA;
		}

		public Float PRZBMA;

		public Float getPRZBMA() {
			return this.PRZBMA;
		}

		public Float CSBCMA2;

		public Float getCSBCMA2() {
			return this.CSBCMA2;
		}

		public Float CSBAMA2;

		public Float getCSBAMA2() {
			return this.CSBAMA2;
		}

		public Float PRZBMA2;

		public Float getPRZBMA2() {
			return this.PRZBMA2;
		}

		public Float SCOBMA;

		public Float getSCOBMA() {
			return this.SCOBMA;
		}

		public String ALIVMA;

		public String getALIVMA() {
			return this.ALIVMA;
		}

		public Float PRAGMA;

		public Float getPRAGMA() {
			return this.PRAGMA;
		}

		public String CLA1MA;

		public String getCLA1MA() {
			return this.CLA1MA;
		}

		public String CLA2MA;

		public String getCLA2MA() {
			return this.CLA2MA;
		}

		public String CLA3MA;

		public String getCLA3MA() {
			return this.CLA3MA;
		}

		public String CLA4MA;

		public String getCLA4MA() {
			return this.CLA4MA;
		}

		public String CLA5MA;

		public String getCLA5MA() {
			return this.CLA5MA;
		}

		public Float PEUNMA;

		public Float getPEUNMA() {
			return this.PEUNMA;
		}

		public Float PEULMA;

		public Float getPEULMA() {
			return this.PEULMA;
		}

		public String RGFIMA;

		public String getRGFIMA() {
			return this.RGFIMA;
		}

		public String TPSTMA;

		public String getTPSTMA() {
			return this.TPSTMA;
		}

		public Float VOUNMA;

		public Float getVOUNMA() {
			return this.VOUNMA;
		}

		public Float TMAPMA;

		public Float getTMAPMA() {
			return this.TMAPMA;
		}

		public Float QPOGMA;

		public Float getQPOGMA() {
			return this.QPOGMA;
		}

		public Float GGCOMA;

		public Float getGGCOMA() {
			return this.GGCOMA;
		}

		public String PCCAMA;

		public String getPCCAMA() {
			return this.PCCAMA;
		}

		public Float CFCAMA;

		public Float getCFCAMA() {
			return this.CFCAMA;
		}

		public String CABCMA;

		public String getCABCMA() {
			return this.CABCMA;
		}

		public Float LIPIMA;

		public Float getLIPIMA() {
			return this.LIPIMA;
		}

		public String CDMPMA;

		public String getCDMPMA() {
			return this.CDMPMA;
		}

		public String CDPRMA;

		public String getCDPRMA() {
			return this.CDPRMA;
		}

		public String CLINMA;

		public String getCLINMA() {
			return this.CLINMA;
		}

		public String PRIEMA;

		public String getPRIEMA() {
			return this.PRIEMA;
		}

		public String CDALMA;

		public String getCDALMA() {
			return this.CDALMA;
		}

		public Float COALMA;

		public Float getCOALMA() {
			return this.COALMA;
		}

		public String INPRMA;

		public String getINPRMA() {
			return this.INPRMA;
		}

		public Float LORIMA;

		public Float getLORIMA() {
			return this.LORIMA;
		}

		public String LOMUMA;

		public String getLOMUMA() {
			return this.LOMUMA;
		}

		public Float PURIMA;

		public Float getPURIMA() {
			return this.PURIMA;
		}

		public Float SSICMA;

		public Float getSSICMA() {
			return this.SSICMA;
		}

		public String UBMAMA;

		public String getUBMAMA() {
			return this.UBMAMA;
		}

		public String SIGPMA;

		public String getSIGPMA() {
			return this.SIGPMA;
		}

		public Float LVMIMA;

		public Float getLVMIMA() {
			return this.LVMIMA;
		}

		public Float PCSCMA;

		public Float getPCSCMA() {
			return this.PCSCMA;
		}

		public Float TMACMA;

		public Float getTMACMA() {
			return this.TMACMA;
		}

		public String INDMMA;

		public String getINDMMA() {
			return this.INDMMA;
		}

		public Float LOMIMA;

		public Float getLOMIMA() {
			return this.LOMIMA;
		}

		public String CDNAMA;

		public String getCDNAMA() {
			return this.CDNAMA;
		}

		public String FLRMMA;

		public String getFLRMMA() {
			return this.FLRMMA;
		}

		public String FLNEMA;

		public String getFLNEMA() {
			return this.FLNEMA;
		}

		public String STATMA;

		public String getSTATMA() {
			return this.STATMA;
		}

		public String FLPEMA;

		public String getFLPEMA() {
			return this.FLPEMA;
		}

		public String FLMPMA;

		public String getFLMPMA() {
			return this.FLMPMA;
		}

		public String FLFAMA;

		public String getFLFAMA() {
			return this.FLFAMA;
		}

		public String FLCQMA;

		public String getFLCQMA() {
			return this.FLCQMA;
		}

		public Float GANVMA;

		public Float getGANVMA() {
			return this.GANVMA;
		}

		public Float GIMXMA;

		public Float getGIMXMA() {
			return this.GIMXMA;
		}

		public String FIMAMA;

		public String getFIMAMA() {
			return this.FIMAMA;
		}

		public String MGIMMA;

		public String getMGIMMA() {
			return this.MGIMMA;
		}

		public String TPCOMA;

		public String getTPCOMA() {
			return this.TPCOMA;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_GToI_ImportProduct.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_GToI_ImportProduct.length == 0) {
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_GToI_ImportProduct,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_GToI_ImportProduct) {

				try {

					int length = 0;

					this.TIREMA = readString(dis);

					this.PROFMA = readString(dis);

					this.DT01MA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DTMNMA = null;
					} else {
						this.DTMNMA = dis.readFloat();
					}

					this.CDDTMA = readString(dis);

					this.CDARMA = readString(dis);

					this.SIGLMA = readString(dis);

					this.DSARMA = readString(dis);

					this.DSSAMA = readString(dis);

					this.UMBAMA = readString(dis);

					this.UMALMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COEFMA = null;
					} else {
						this.COEFMA = dis.readFloat();
					}

					this.FOABMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CSBCMA = null;
					} else {
						this.CSBCMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CSBAMA = null;
					} else {
						this.CSBAMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRZBMA = null;
					} else {
						this.PRZBMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CSBCMA2 = null;
					} else {
						this.CSBCMA2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CSBAMA2 = null;
					} else {
						this.CSBAMA2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRZBMA2 = null;
					} else {
						this.PRZBMA2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SCOBMA = null;
					} else {
						this.SCOBMA = dis.readFloat();
					}

					this.ALIVMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRAGMA = null;
					} else {
						this.PRAGMA = dis.readFloat();
					}

					this.CLA1MA = readString(dis);

					this.CLA2MA = readString(dis);

					this.CLA3MA = readString(dis);

					this.CLA4MA = readString(dis);

					this.CLA5MA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PEUNMA = null;
					} else {
						this.PEUNMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PEULMA = null;
					} else {
						this.PEULMA = dis.readFloat();
					}

					this.RGFIMA = readString(dis);

					this.TPSTMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VOUNMA = null;
					} else {
						this.VOUNMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TMAPMA = null;
					} else {
						this.TMAPMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.QPOGMA = null;
					} else {
						this.QPOGMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.GGCOMA = null;
					} else {
						this.GGCOMA = dis.readFloat();
					}

					this.PCCAMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CFCAMA = null;
					} else {
						this.CFCAMA = dis.readFloat();
					}

					this.CABCMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LIPIMA = null;
					} else {
						this.LIPIMA = dis.readFloat();
					}

					this.CDMPMA = readString(dis);

					this.CDPRMA = readString(dis);

					this.CLINMA = readString(dis);

					this.PRIEMA = readString(dis);

					this.CDALMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COALMA = null;
					} else {
						this.COALMA = dis.readFloat();
					}

					this.INPRMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LORIMA = null;
					} else {
						this.LORIMA = dis.readFloat();
					}

					this.LOMUMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PURIMA = null;
					} else {
						this.PURIMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SSICMA = null;
					} else {
						this.SSICMA = dis.readFloat();
					}

					this.UBMAMA = readString(dis);

					this.SIGPMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LVMIMA = null;
					} else {
						this.LVMIMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PCSCMA = null;
					} else {
						this.PCSCMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TMACMA = null;
					} else {
						this.TMACMA = dis.readFloat();
					}

					this.INDMMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOMIMA = null;
					} else {
						this.LOMIMA = dis.readFloat();
					}

					this.CDNAMA = readString(dis);

					this.FLRMMA = readString(dis);

					this.FLNEMA = readString(dis);

					this.STATMA = readString(dis);

					this.FLPEMA = readString(dis);

					this.FLMPMA = readString(dis);

					this.FLFAMA = readString(dis);

					this.FLCQMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.GANVMA = null;
					} else {
						this.GANVMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.GIMXMA = null;
					} else {
						this.GIMXMA = dis.readFloat();
					}

					this.FIMAMA = readString(dis);

					this.MGIMMA = readString(dis);

					this.TPCOMA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TIREMA, dos);

				// String

				writeString(this.PROFMA, dos);

				// String

				writeString(this.DT01MA, dos);

				// Float

				if (this.DTMNMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DTMNMA);
				}

				// String

				writeString(this.CDDTMA, dos);

				// String

				writeString(this.CDARMA, dos);

				// String

				writeString(this.SIGLMA, dos);

				// String

				writeString(this.DSARMA, dos);

				// String

				writeString(this.DSSAMA, dos);

				// String

				writeString(this.UMBAMA, dos);

				// String

				writeString(this.UMALMA, dos);

				// Float

				if (this.COEFMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COEFMA);
				}

				// String

				writeString(this.FOABMA, dos);

				// Float

				if (this.CSBCMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CSBCMA);
				}

				// Float

				if (this.CSBAMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CSBAMA);
				}

				// Float

				if (this.PRZBMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRZBMA);
				}

				// Float

				if (this.CSBCMA2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CSBCMA2);
				}

				// Float

				if (this.CSBAMA2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CSBAMA2);
				}

				// Float

				if (this.PRZBMA2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRZBMA2);
				}

				// Float

				if (this.SCOBMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SCOBMA);
				}

				// String

				writeString(this.ALIVMA, dos);

				// Float

				if (this.PRAGMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRAGMA);
				}

				// String

				writeString(this.CLA1MA, dos);

				// String

				writeString(this.CLA2MA, dos);

				// String

				writeString(this.CLA3MA, dos);

				// String

				writeString(this.CLA4MA, dos);

				// String

				writeString(this.CLA5MA, dos);

				// Float

				if (this.PEUNMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PEUNMA);
				}

				// Float

				if (this.PEULMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PEULMA);
				}

				// String

				writeString(this.RGFIMA, dos);

				// String

				writeString(this.TPSTMA, dos);

				// Float

				if (this.VOUNMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.VOUNMA);
				}

				// Float

				if (this.TMAPMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TMAPMA);
				}

				// Float

				if (this.QPOGMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QPOGMA);
				}

				// Float

				if (this.GGCOMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.GGCOMA);
				}

				// String

				writeString(this.PCCAMA, dos);

				// Float

				if (this.CFCAMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CFCAMA);
				}

				// String

				writeString(this.CABCMA, dos);

				// Float

				if (this.LIPIMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LIPIMA);
				}

				// String

				writeString(this.CDMPMA, dos);

				// String

				writeString(this.CDPRMA, dos);

				// String

				writeString(this.CLINMA, dos);

				// String

				writeString(this.PRIEMA, dos);

				// String

				writeString(this.CDALMA, dos);

				// Float

				if (this.COALMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COALMA);
				}

				// String

				writeString(this.INPRMA, dos);

				// Float

				if (this.LORIMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LORIMA);
				}

				// String

				writeString(this.LOMUMA, dos);

				// Float

				if (this.PURIMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PURIMA);
				}

				// Float

				if (this.SSICMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SSICMA);
				}

				// String

				writeString(this.UBMAMA, dos);

				// String

				writeString(this.SIGPMA, dos);

				// Float

				if (this.LVMIMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LVMIMA);
				}

				// Float

				if (this.PCSCMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PCSCMA);
				}

				// Float

				if (this.TMACMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TMACMA);
				}

				// String

				writeString(this.INDMMA, dos);

				// Float

				if (this.LOMIMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOMIMA);
				}

				// String

				writeString(this.CDNAMA, dos);

				// String

				writeString(this.FLRMMA, dos);

				// String

				writeString(this.FLNEMA, dos);

				// String

				writeString(this.STATMA, dos);

				// String

				writeString(this.FLPEMA, dos);

				// String

				writeString(this.FLMPMA, dos);

				// String

				writeString(this.FLFAMA, dos);

				// String

				writeString(this.FLCQMA, dos);

				// Float

				if (this.GANVMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.GANVMA);
				}

				// Float

				if (this.GIMXMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.GIMXMA);
				}

				// String

				writeString(this.FIMAMA, dos);

				// String

				writeString(this.MGIMMA, dos);

				// String

				writeString(this.TPCOMA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TIREMA=" + TIREMA);
			sb.append(",PROFMA=" + PROFMA);
			sb.append(",DT01MA=" + DT01MA);
			sb.append(",DTMNMA=" + String.valueOf(DTMNMA));
			sb.append(",CDDTMA=" + CDDTMA);
			sb.append(",CDARMA=" + CDARMA);
			sb.append(",SIGLMA=" + SIGLMA);
			sb.append(",DSARMA=" + DSARMA);
			sb.append(",DSSAMA=" + DSSAMA);
			sb.append(",UMBAMA=" + UMBAMA);
			sb.append(",UMALMA=" + UMALMA);
			sb.append(",COEFMA=" + String.valueOf(COEFMA));
			sb.append(",FOABMA=" + FOABMA);
			sb.append(",CSBCMA=" + String.valueOf(CSBCMA));
			sb.append(",CSBAMA=" + String.valueOf(CSBAMA));
			sb.append(",PRZBMA=" + String.valueOf(PRZBMA));
			sb.append(",CSBCMA2=" + String.valueOf(CSBCMA2));
			sb.append(",CSBAMA2=" + String.valueOf(CSBAMA2));
			sb.append(",PRZBMA2=" + String.valueOf(PRZBMA2));
			sb.append(",SCOBMA=" + String.valueOf(SCOBMA));
			sb.append(",ALIVMA=" + ALIVMA);
			sb.append(",PRAGMA=" + String.valueOf(PRAGMA));
			sb.append(",CLA1MA=" + CLA1MA);
			sb.append(",CLA2MA=" + CLA2MA);
			sb.append(",CLA3MA=" + CLA3MA);
			sb.append(",CLA4MA=" + CLA4MA);
			sb.append(",CLA5MA=" + CLA5MA);
			sb.append(",PEUNMA=" + String.valueOf(PEUNMA));
			sb.append(",PEULMA=" + String.valueOf(PEULMA));
			sb.append(",RGFIMA=" + RGFIMA);
			sb.append(",TPSTMA=" + TPSTMA);
			sb.append(",VOUNMA=" + String.valueOf(VOUNMA));
			sb.append(",TMAPMA=" + String.valueOf(TMAPMA));
			sb.append(",QPOGMA=" + String.valueOf(QPOGMA));
			sb.append(",GGCOMA=" + String.valueOf(GGCOMA));
			sb.append(",PCCAMA=" + PCCAMA);
			sb.append(",CFCAMA=" + String.valueOf(CFCAMA));
			sb.append(",CABCMA=" + CABCMA);
			sb.append(",LIPIMA=" + String.valueOf(LIPIMA));
			sb.append(",CDMPMA=" + CDMPMA);
			sb.append(",CDPRMA=" + CDPRMA);
			sb.append(",CLINMA=" + CLINMA);
			sb.append(",PRIEMA=" + PRIEMA);
			sb.append(",CDALMA=" + CDALMA);
			sb.append(",COALMA=" + String.valueOf(COALMA));
			sb.append(",INPRMA=" + INPRMA);
			sb.append(",LORIMA=" + String.valueOf(LORIMA));
			sb.append(",LOMUMA=" + LOMUMA);
			sb.append(",PURIMA=" + String.valueOf(PURIMA));
			sb.append(",SSICMA=" + String.valueOf(SSICMA));
			sb.append(",UBMAMA=" + UBMAMA);
			sb.append(",SIGPMA=" + SIGPMA);
			sb.append(",LVMIMA=" + String.valueOf(LVMIMA));
			sb.append(",PCSCMA=" + String.valueOf(PCSCMA));
			sb.append(",TMACMA=" + String.valueOf(TMACMA));
			sb.append(",INDMMA=" + INDMMA);
			sb.append(",LOMIMA=" + String.valueOf(LOMIMA));
			sb.append(",CDNAMA=" + CDNAMA);
			sb.append(",FLRMMA=" + FLRMMA);
			sb.append(",FLNEMA=" + FLNEMA);
			sb.append(",STATMA=" + STATMA);
			sb.append(",FLPEMA=" + FLPEMA);
			sb.append(",FLMPMA=" + FLMPMA);
			sb.append(",FLFAMA=" + FLFAMA);
			sb.append(",FLCQMA=" + FLCQMA);
			sb.append(",GANVMA=" + String.valueOf(GANVMA));
			sb.append(",GIMXMA=" + String.valueOf(GIMXMA));
			sb.append(",FIMAMA=" + FIMAMA);
			sb.append(",MGIMMA=" + MGIMMA);
			sb.append(",TPCOMA=" + TPCOMA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAccessInput_1Struct implements
			routines.system.IPersistableRow<after_tAccessInput_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_GToI_ImportProduct = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[0];

		public String TIREMA;

		public String getTIREMA() {
			return this.TIREMA;
		}

		public String PROFMA;

		public String getPROFMA() {
			return this.PROFMA;
		}

		public String DT01MA;

		public String getDT01MA() {
			return this.DT01MA;
		}

		public Float DTMNMA;

		public Float getDTMNMA() {
			return this.DTMNMA;
		}

		public String CDDTMA;

		public String getCDDTMA() {
			return this.CDDTMA;
		}

		public String CDARMA;

		public String getCDARMA() {
			return this.CDARMA;
		}

		public String SIGLMA;

		public String getSIGLMA() {
			return this.SIGLMA;
		}

		public String DSARMA;

		public String getDSARMA() {
			return this.DSARMA;
		}

		public String DSSAMA;

		public String getDSSAMA() {
			return this.DSSAMA;
		}

		public String UMBAMA;

		public String getUMBAMA() {
			return this.UMBAMA;
		}

		public String UMALMA;

		public String getUMALMA() {
			return this.UMALMA;
		}

		public Float COEFMA;

		public Float getCOEFMA() {
			return this.COEFMA;
		}

		public String FOABMA;

		public String getFOABMA() {
			return this.FOABMA;
		}

		public Float CSBCMA;

		public Float getCSBCMA() {
			return this.CSBCMA;
		}

		public Float CSBAMA;

		public Float getCSBAMA() {
			return this.CSBAMA;
		}

		public Float PRZBMA;

		public Float getPRZBMA() {
			return this.PRZBMA;
		}

		public Float CSBCMA2;

		public Float getCSBCMA2() {
			return this.CSBCMA2;
		}

		public Float CSBAMA2;

		public Float getCSBAMA2() {
			return this.CSBAMA2;
		}

		public Float PRZBMA2;

		public Float getPRZBMA2() {
			return this.PRZBMA2;
		}

		public Float SCOBMA;

		public Float getSCOBMA() {
			return this.SCOBMA;
		}

		public String ALIVMA;

		public String getALIVMA() {
			return this.ALIVMA;
		}

		public Float PRAGMA;

		public Float getPRAGMA() {
			return this.PRAGMA;
		}

		public String CLA1MA;

		public String getCLA1MA() {
			return this.CLA1MA;
		}

		public String CLA2MA;

		public String getCLA2MA() {
			return this.CLA2MA;
		}

		public String CLA3MA;

		public String getCLA3MA() {
			return this.CLA3MA;
		}

		public String CLA4MA;

		public String getCLA4MA() {
			return this.CLA4MA;
		}

		public String CLA5MA;

		public String getCLA5MA() {
			return this.CLA5MA;
		}

		public Float PEUNMA;

		public Float getPEUNMA() {
			return this.PEUNMA;
		}

		public Float PEULMA;

		public Float getPEULMA() {
			return this.PEULMA;
		}

		public String RGFIMA;

		public String getRGFIMA() {
			return this.RGFIMA;
		}

		public String TPSTMA;

		public String getTPSTMA() {
			return this.TPSTMA;
		}

		public Float VOUNMA;

		public Float getVOUNMA() {
			return this.VOUNMA;
		}

		public Float TMAPMA;

		public Float getTMAPMA() {
			return this.TMAPMA;
		}

		public Float QPOGMA;

		public Float getQPOGMA() {
			return this.QPOGMA;
		}

		public Float GGCOMA;

		public Float getGGCOMA() {
			return this.GGCOMA;
		}

		public String PCCAMA;

		public String getPCCAMA() {
			return this.PCCAMA;
		}

		public Float CFCAMA;

		public Float getCFCAMA() {
			return this.CFCAMA;
		}

		public String CABCMA;

		public String getCABCMA() {
			return this.CABCMA;
		}

		public Float LIPIMA;

		public Float getLIPIMA() {
			return this.LIPIMA;
		}

		public String CDMPMA;

		public String getCDMPMA() {
			return this.CDMPMA;
		}

		public String CDPRMA;

		public String getCDPRMA() {
			return this.CDPRMA;
		}

		public String CLINMA;

		public String getCLINMA() {
			return this.CLINMA;
		}

		public String PRIEMA;

		public String getPRIEMA() {
			return this.PRIEMA;
		}

		public String CDALMA;

		public String getCDALMA() {
			return this.CDALMA;
		}

		public Float COALMA;

		public Float getCOALMA() {
			return this.COALMA;
		}

		public String INPRMA;

		public String getINPRMA() {
			return this.INPRMA;
		}

		public Float LORIMA;

		public Float getLORIMA() {
			return this.LORIMA;
		}

		public String LOMUMA;

		public String getLOMUMA() {
			return this.LOMUMA;
		}

		public Float PURIMA;

		public Float getPURIMA() {
			return this.PURIMA;
		}

		public Float SSICMA;

		public Float getSSICMA() {
			return this.SSICMA;
		}

		public String UBMAMA;

		public String getUBMAMA() {
			return this.UBMAMA;
		}

		public String SIGPMA;

		public String getSIGPMA() {
			return this.SIGPMA;
		}

		public Float LVMIMA;

		public Float getLVMIMA() {
			return this.LVMIMA;
		}

		public Float PCSCMA;

		public Float getPCSCMA() {
			return this.PCSCMA;
		}

		public Float TMACMA;

		public Float getTMACMA() {
			return this.TMACMA;
		}

		public String INDMMA;

		public String getINDMMA() {
			return this.INDMMA;
		}

		public Float LOMIMA;

		public Float getLOMIMA() {
			return this.LOMIMA;
		}

		public String CDNAMA;

		public String getCDNAMA() {
			return this.CDNAMA;
		}

		public String FLRMMA;

		public String getFLRMMA() {
			return this.FLRMMA;
		}

		public String FLNEMA;

		public String getFLNEMA() {
			return this.FLNEMA;
		}

		public String STATMA;

		public String getSTATMA() {
			return this.STATMA;
		}

		public String FLPEMA;

		public String getFLPEMA() {
			return this.FLPEMA;
		}

		public String FLMPMA;

		public String getFLMPMA() {
			return this.FLMPMA;
		}

		public String FLFAMA;

		public String getFLFAMA() {
			return this.FLFAMA;
		}

		public String FLCQMA;

		public String getFLCQMA() {
			return this.FLCQMA;
		}

		public Float GANVMA;

		public Float getGANVMA() {
			return this.GANVMA;
		}

		public Float GIMXMA;

		public Float getGIMXMA() {
			return this.GIMXMA;
		}

		public String FIMAMA;

		public String getFIMAMA() {
			return this.FIMAMA;
		}

		public String MGIMMA;

		public String getMGIMMA() {
			return this.MGIMMA;
		}

		public String TPCOMA;

		public String getTPCOMA() {
			return this.TPCOMA;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_GToI_ImportProduct.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_GToI_ImportProduct.length == 0) {
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_GToI_ImportProduct,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_GToI_ImportProduct) {

				try {

					int length = 0;

					this.TIREMA = readString(dis);

					this.PROFMA = readString(dis);

					this.DT01MA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DTMNMA = null;
					} else {
						this.DTMNMA = dis.readFloat();
					}

					this.CDDTMA = readString(dis);

					this.CDARMA = readString(dis);

					this.SIGLMA = readString(dis);

					this.DSARMA = readString(dis);

					this.DSSAMA = readString(dis);

					this.UMBAMA = readString(dis);

					this.UMALMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COEFMA = null;
					} else {
						this.COEFMA = dis.readFloat();
					}

					this.FOABMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CSBCMA = null;
					} else {
						this.CSBCMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CSBAMA = null;
					} else {
						this.CSBAMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRZBMA = null;
					} else {
						this.PRZBMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CSBCMA2 = null;
					} else {
						this.CSBCMA2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CSBAMA2 = null;
					} else {
						this.CSBAMA2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRZBMA2 = null;
					} else {
						this.PRZBMA2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SCOBMA = null;
					} else {
						this.SCOBMA = dis.readFloat();
					}

					this.ALIVMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRAGMA = null;
					} else {
						this.PRAGMA = dis.readFloat();
					}

					this.CLA1MA = readString(dis);

					this.CLA2MA = readString(dis);

					this.CLA3MA = readString(dis);

					this.CLA4MA = readString(dis);

					this.CLA5MA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PEUNMA = null;
					} else {
						this.PEUNMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PEULMA = null;
					} else {
						this.PEULMA = dis.readFloat();
					}

					this.RGFIMA = readString(dis);

					this.TPSTMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VOUNMA = null;
					} else {
						this.VOUNMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TMAPMA = null;
					} else {
						this.TMAPMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.QPOGMA = null;
					} else {
						this.QPOGMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.GGCOMA = null;
					} else {
						this.GGCOMA = dis.readFloat();
					}

					this.PCCAMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CFCAMA = null;
					} else {
						this.CFCAMA = dis.readFloat();
					}

					this.CABCMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LIPIMA = null;
					} else {
						this.LIPIMA = dis.readFloat();
					}

					this.CDMPMA = readString(dis);

					this.CDPRMA = readString(dis);

					this.CLINMA = readString(dis);

					this.PRIEMA = readString(dis);

					this.CDALMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COALMA = null;
					} else {
						this.COALMA = dis.readFloat();
					}

					this.INPRMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LORIMA = null;
					} else {
						this.LORIMA = dis.readFloat();
					}

					this.LOMUMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PURIMA = null;
					} else {
						this.PURIMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SSICMA = null;
					} else {
						this.SSICMA = dis.readFloat();
					}

					this.UBMAMA = readString(dis);

					this.SIGPMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LVMIMA = null;
					} else {
						this.LVMIMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PCSCMA = null;
					} else {
						this.PCSCMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TMACMA = null;
					} else {
						this.TMACMA = dis.readFloat();
					}

					this.INDMMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOMIMA = null;
					} else {
						this.LOMIMA = dis.readFloat();
					}

					this.CDNAMA = readString(dis);

					this.FLRMMA = readString(dis);

					this.FLNEMA = readString(dis);

					this.STATMA = readString(dis);

					this.FLPEMA = readString(dis);

					this.FLMPMA = readString(dis);

					this.FLFAMA = readString(dis);

					this.FLCQMA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.GANVMA = null;
					} else {
						this.GANVMA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.GIMXMA = null;
					} else {
						this.GIMXMA = dis.readFloat();
					}

					this.FIMAMA = readString(dis);

					this.MGIMMA = readString(dis);

					this.TPCOMA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TIREMA, dos);

				// String

				writeString(this.PROFMA, dos);

				// String

				writeString(this.DT01MA, dos);

				// Float

				if (this.DTMNMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DTMNMA);
				}

				// String

				writeString(this.CDDTMA, dos);

				// String

				writeString(this.CDARMA, dos);

				// String

				writeString(this.SIGLMA, dos);

				// String

				writeString(this.DSARMA, dos);

				// String

				writeString(this.DSSAMA, dos);

				// String

				writeString(this.UMBAMA, dos);

				// String

				writeString(this.UMALMA, dos);

				// Float

				if (this.COEFMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COEFMA);
				}

				// String

				writeString(this.FOABMA, dos);

				// Float

				if (this.CSBCMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CSBCMA);
				}

				// Float

				if (this.CSBAMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CSBAMA);
				}

				// Float

				if (this.PRZBMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRZBMA);
				}

				// Float

				if (this.CSBCMA2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CSBCMA2);
				}

				// Float

				if (this.CSBAMA2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CSBAMA2);
				}

				// Float

				if (this.PRZBMA2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRZBMA2);
				}

				// Float

				if (this.SCOBMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SCOBMA);
				}

				// String

				writeString(this.ALIVMA, dos);

				// Float

				if (this.PRAGMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRAGMA);
				}

				// String

				writeString(this.CLA1MA, dos);

				// String

				writeString(this.CLA2MA, dos);

				// String

				writeString(this.CLA3MA, dos);

				// String

				writeString(this.CLA4MA, dos);

				// String

				writeString(this.CLA5MA, dos);

				// Float

				if (this.PEUNMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PEUNMA);
				}

				// Float

				if (this.PEULMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PEULMA);
				}

				// String

				writeString(this.RGFIMA, dos);

				// String

				writeString(this.TPSTMA, dos);

				// Float

				if (this.VOUNMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.VOUNMA);
				}

				// Float

				if (this.TMAPMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TMAPMA);
				}

				// Float

				if (this.QPOGMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QPOGMA);
				}

				// Float

				if (this.GGCOMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.GGCOMA);
				}

				// String

				writeString(this.PCCAMA, dos);

				// Float

				if (this.CFCAMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CFCAMA);
				}

				// String

				writeString(this.CABCMA, dos);

				// Float

				if (this.LIPIMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LIPIMA);
				}

				// String

				writeString(this.CDMPMA, dos);

				// String

				writeString(this.CDPRMA, dos);

				// String

				writeString(this.CLINMA, dos);

				// String

				writeString(this.PRIEMA, dos);

				// String

				writeString(this.CDALMA, dos);

				// Float

				if (this.COALMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COALMA);
				}

				// String

				writeString(this.INPRMA, dos);

				// Float

				if (this.LORIMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LORIMA);
				}

				// String

				writeString(this.LOMUMA, dos);

				// Float

				if (this.PURIMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PURIMA);
				}

				// Float

				if (this.SSICMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SSICMA);
				}

				// String

				writeString(this.UBMAMA, dos);

				// String

				writeString(this.SIGPMA, dos);

				// Float

				if (this.LVMIMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LVMIMA);
				}

				// Float

				if (this.PCSCMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PCSCMA);
				}

				// Float

				if (this.TMACMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TMACMA);
				}

				// String

				writeString(this.INDMMA, dos);

				// Float

				if (this.LOMIMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOMIMA);
				}

				// String

				writeString(this.CDNAMA, dos);

				// String

				writeString(this.FLRMMA, dos);

				// String

				writeString(this.FLNEMA, dos);

				// String

				writeString(this.STATMA, dos);

				// String

				writeString(this.FLPEMA, dos);

				// String

				writeString(this.FLMPMA, dos);

				// String

				writeString(this.FLFAMA, dos);

				// String

				writeString(this.FLCQMA, dos);

				// Float

				if (this.GANVMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.GANVMA);
				}

				// Float

				if (this.GIMXMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.GIMXMA);
				}

				// String

				writeString(this.FIMAMA, dos);

				// String

				writeString(this.MGIMMA, dos);

				// String

				writeString(this.TPCOMA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TIREMA=" + TIREMA);
			sb.append(",PROFMA=" + PROFMA);
			sb.append(",DT01MA=" + DT01MA);
			sb.append(",DTMNMA=" + String.valueOf(DTMNMA));
			sb.append(",CDDTMA=" + CDDTMA);
			sb.append(",CDARMA=" + CDARMA);
			sb.append(",SIGLMA=" + SIGLMA);
			sb.append(",DSARMA=" + DSARMA);
			sb.append(",DSSAMA=" + DSSAMA);
			sb.append(",UMBAMA=" + UMBAMA);
			sb.append(",UMALMA=" + UMALMA);
			sb.append(",COEFMA=" + String.valueOf(COEFMA));
			sb.append(",FOABMA=" + FOABMA);
			sb.append(",CSBCMA=" + String.valueOf(CSBCMA));
			sb.append(",CSBAMA=" + String.valueOf(CSBAMA));
			sb.append(",PRZBMA=" + String.valueOf(PRZBMA));
			sb.append(",CSBCMA2=" + String.valueOf(CSBCMA2));
			sb.append(",CSBAMA2=" + String.valueOf(CSBAMA2));
			sb.append(",PRZBMA2=" + String.valueOf(PRZBMA2));
			sb.append(",SCOBMA=" + String.valueOf(SCOBMA));
			sb.append(",ALIVMA=" + ALIVMA);
			sb.append(",PRAGMA=" + String.valueOf(PRAGMA));
			sb.append(",CLA1MA=" + CLA1MA);
			sb.append(",CLA2MA=" + CLA2MA);
			sb.append(",CLA3MA=" + CLA3MA);
			sb.append(",CLA4MA=" + CLA4MA);
			sb.append(",CLA5MA=" + CLA5MA);
			sb.append(",PEUNMA=" + String.valueOf(PEUNMA));
			sb.append(",PEULMA=" + String.valueOf(PEULMA));
			sb.append(",RGFIMA=" + RGFIMA);
			sb.append(",TPSTMA=" + TPSTMA);
			sb.append(",VOUNMA=" + String.valueOf(VOUNMA));
			sb.append(",TMAPMA=" + String.valueOf(TMAPMA));
			sb.append(",QPOGMA=" + String.valueOf(QPOGMA));
			sb.append(",GGCOMA=" + String.valueOf(GGCOMA));
			sb.append(",PCCAMA=" + PCCAMA);
			sb.append(",CFCAMA=" + String.valueOf(CFCAMA));
			sb.append(",CABCMA=" + CABCMA);
			sb.append(",LIPIMA=" + String.valueOf(LIPIMA));
			sb.append(",CDMPMA=" + CDMPMA);
			sb.append(",CDPRMA=" + CDPRMA);
			sb.append(",CLINMA=" + CLINMA);
			sb.append(",PRIEMA=" + PRIEMA);
			sb.append(",CDALMA=" + CDALMA);
			sb.append(",COALMA=" + String.valueOf(COALMA));
			sb.append(",INPRMA=" + INPRMA);
			sb.append(",LORIMA=" + String.valueOf(LORIMA));
			sb.append(",LOMUMA=" + LOMUMA);
			sb.append(",PURIMA=" + String.valueOf(PURIMA));
			sb.append(",SSICMA=" + String.valueOf(SSICMA));
			sb.append(",UBMAMA=" + UBMAMA);
			sb.append(",SIGPMA=" + SIGPMA);
			sb.append(",LVMIMA=" + String.valueOf(LVMIMA));
			sb.append(",PCSCMA=" + String.valueOf(PCSCMA));
			sb.append(",TMACMA=" + String.valueOf(TMACMA));
			sb.append(",INDMMA=" + INDMMA);
			sb.append(",LOMIMA=" + String.valueOf(LOMIMA));
			sb.append(",CDNAMA=" + CDNAMA);
			sb.append(",FLRMMA=" + FLRMMA);
			sb.append(",FLNEMA=" + FLNEMA);
			sb.append(",STATMA=" + STATMA);
			sb.append(",FLPEMA=" + FLPEMA);
			sb.append(",FLMPMA=" + FLMPMA);
			sb.append(",FLFAMA=" + FLFAMA);
			sb.append(",FLCQMA=" + FLCQMA);
			sb.append(",GANVMA=" + String.valueOf(GANVMA));
			sb.append(",GIMXMA=" + String.valueOf(GIMXMA));
			sb.append(",FIMAMA=" + FIMAMA);
			sb.append(",MGIMMA=" + MGIMMA);
			sb.append(",TPCOMA=" + TPCOMA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAccessInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAccessInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAccessInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputExcel_1Process(globalMap);

				row1Struct row1 = new row1Struct();
				insert_i_productStruct insert_i_product = new insert_i_productStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("insert_i_product"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = "";

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "i_product";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "i_product";
				}

				int updateKeyCount_tPostgresqlOutput_1 = 1;
				if (updateKeyCount_tPostgresqlOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;
				String dbUser_tPostgresqlOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_1 = "jdbc:postgresql://" + "lux1"
						+ ":" + "5432" + "/" + "idempiere";
				dbUser_tPostgresqlOutput_1 = "adempiere";

				final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("1b1a87b585739115c3e16b424acd1219");

				String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

				conn_tPostgresqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_1,
								dbUser_tPostgresqlOutput_1,
								dbPwd_tPostgresqlOutput_1);

				resourceMap.put("conn_tPostgresqlOutput_1",
						conn_tPostgresqlOutput_1);
				conn_tPostgresqlOutput_1.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_1 = 10000;
				int commitCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_1
								+ "\" WHERE \"i_product_id\" = ?");
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"i_product_id\",\"ad_client_id\",\"ad_org_id\",\"isactive\",\"created\",\"createdby\",\"updated\",\"updatedby\",\"i_isimported\",\"i_errormsg\",\"m_product_id\",\"value\",\"name\",\"description\",\"documentnote\",\"help\",\"upc\",\"sku\",\"x12de355\",\"c_uom_id\",\"productcategory_value\",\"m_product_category_id\",\"producttype\",\"classification\",\"volume\",\"weight\",\"shelfwidth\",\"shelfheight\",\"shelfdepth\",\"unitsperpallet\",\"discontinued\",\"discontinuedby\",\"imageurl\",\"descriptionurl\",\"bpartner_value\",\"c_bpartner_id\",\"iso_code\",\"c_currency_id\",\"pricelist\",\"pricepo\",\"royaltyamt\",\"priceeffective\",\"vendorproductno\",\"vendorcategory\",\"manufacturer\",\"order_min\",\"order_pack\",\"costperorder\",\"deliverytime_promised\",\"processing\",\"processed\",\"pricestd\",\"pricelimit\",\"discontinuedat\",\"i_product_uu\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);
				String update_tPostgresqlOutput_1 = "UPDATE \""
						+ tableName_tPostgresqlOutput_1
						+ "\" SET \"ad_client_id\" = ?,\"ad_org_id\" = ?,\"isactive\" = ?,\"created\" = ?,\"createdby\" = ?,\"updated\" = ?,\"updatedby\" = ?,\"i_isimported\" = ?,\"i_errormsg\" = ?,\"m_product_id\" = ?,\"value\" = ?,\"name\" = ?,\"description\" = ?,\"documentnote\" = ?,\"help\" = ?,\"upc\" = ?,\"sku\" = ?,\"x12de355\" = ?,\"c_uom_id\" = ?,\"productcategory_value\" = ?,\"m_product_category_id\" = ?,\"producttype\" = ?,\"classification\" = ?,\"volume\" = ?,\"weight\" = ?,\"shelfwidth\" = ?,\"shelfheight\" = ?,\"shelfdepth\" = ?,\"unitsperpallet\" = ?,\"discontinued\" = ?,\"discontinuedby\" = ?,\"imageurl\" = ?,\"descriptionurl\" = ?,\"bpartner_value\" = ?,\"c_bpartner_id\" = ?,\"iso_code\" = ?,\"c_currency_id\" = ?,\"pricelist\" = ?,\"pricepo\" = ?,\"royaltyamt\" = ?,\"priceeffective\" = ?,\"vendorproductno\" = ?,\"vendorcategory\" = ?,\"manufacturer\" = ?,\"order_min\" = ?,\"order_pack\" = ?,\"costperorder\" = ?,\"deliverytime_promised\" = ?,\"processing\" = ?,\"processed\" = ?,\"pricestd\" = ?,\"pricelimit\" = ?,\"discontinuedat\" = ?,\"i_product_uu\" = ? WHERE \"i_product_id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(update_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					double var1;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				insert_i_productStruct insert_i_product_tmp = new insert_i_productStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tAccessInput_1 begin ] start
				 */

				ok_Hash.put("tAccessInput_1", false);
				start_Hash.put("tAccessInput_1", System.currentTimeMillis());

				currentComponent = "tAccessInput_1";

				int tos_count_tAccessInput_1 = 0;

				int nb_line_tAccessInput_1 = 0;
				java.sql.Connection conn_tAccessInput_1 = null;
				String driverClass_tAccessInput_1 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tAccessInput_1);

				String url_tAccessInput_1 = "jdbc:ucanaccess://"
						+ "/home/luxguru88/Scrivania/as400_r0.mdb";
				String dbUser_tAccessInput_1 = "";

				final String decryptedPassword_tAccessInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tAccessInput_1 = decryptedPassword_tAccessInput_1;

				String atnParams_tAccessInput_1 = "memory=false";
				atnParams_tAccessInput_1 = atnParams_tAccessInput_1.replaceAll(
						"&", "\n");
				java.util.Properties atnParamsPrope_tAccessInput_1 = new java.util.Properties();
				atnParamsPrope_tAccessInput_1
						.put("user", dbUser_tAccessInput_1);
				atnParamsPrope_tAccessInput_1.put("password",
						dbPwd_tAccessInput_1);
				atnParamsPrope_tAccessInput_1
						.load(new java.io.ByteArrayInputStream(
								atnParams_tAccessInput_1.getBytes()));
				conn_tAccessInput_1 = java.sql.DriverManager.getConnection(
						url_tAccessInput_1, atnParamsPrope_tAccessInput_1);

				java.sql.Statement stmt_tAccessInput_1 = conn_tAccessInput_1
						.createStatement();

				String dbquery_tAccessInput_1 = "SELECT \n  ZMGART00F.TIREMA, \n  ZMGART00F.PROFMA, \n  ZMGART00F.DT01MA, \n  ZMGART00F.DTMNMA, \n  ZMGART00F.CDDTMA, \n  ZMGART00F.CDARMA, \n  ZMGART00F.SIGLMA, \n  ZMGART00F.DSARMA, \n  ZMGART00F.DSSAMA, \n  ZMGART00F.UMBAMA, \n  ZMGART00F.UMALMA, \n  ZMGART00F.COEFMA, \n  ZMGART00F.FOABMA, \n  ZMGART00F.CSBCMA, \n  ZMGART00F.CSBAMA, \n  ZMGART00F.PRZBMA, \n  ZMGART00F.CSBCMA2, \n  ZMGART00F.CSBAMA2, \n  ZMGART00F.PRZBMA2, \n  ZMGART00F.SCOBMA, \n  ZMGART00F.ALIVMA, \n  ZMGART00F.PRAGMA, \n  ZMGART00F.CLA1MA, \n  ZMGART00F.CLA2MA, \n  ZMGART00F.CLA3MA, \n  ZMGART00F.CLA4MA, \n  ZMGART00F.CLA5MA, \n  ZMGART00F.PEUNMA, \n  ZMGART00F.PEULMA, \n  ZMGART00F.RGFIMA, \n  ZMGART00F.TPSTMA, \n  ZMGART00F.VOUNMA, \n  ZMGART00F.TMAPMA, \n  ZMGART00F.QPOGMA, \n  ZMGART00F.GGCOMA, \n  ZMGART00F.PCCAMA, \n  ZMGART00F.CFCAMA, \n  ZMGART00F.CABCMA, \n  ZMGART00F.LIPIMA, \n  ZMGART00F.CDMPMA, \n  ZMGART00F.CDPRMA, \n  ZMGART00F.CLINMA, \n  ZMGART00F.PRIEMA, \n  ZMGART00F.CDALMA, \n  ZMGART00F.COALMA, \n  ZMGART00F.INPRMA, \n  ZMGART00F.LORIMA, \n  ZMGART00F.LOMUMA, \n  ZMGART00F.PURIMA, \n  ZMGART00F.SSICMA, \n  ZMGART00F.UBMAMA, \n  ZMGART00F.SIGPMA, \n  ZMGART00F.LVMIMA, \n  ZMGART00F.PCSCMA, \n  ZMGART00F.TMACMA, \n  ZMGART00F.INDMMA, \n  ZMGART00F.LOMIMA, \n  ZMGART00F.CDNAMA, \n  ZMGART00F.FLRMMA, \n  ZMGART00F.FLNEMA, \n  ZMGART00F.STATMA, \n  ZMGART00F.FLPEMA, \n  ZMGART00F.FLMPMA, \n  ZMGART00F.FLFAMA, \n  ZMGART00F.FLCQMA, \n  ZMGART00F.GANVMA, \n  ZMGART00F.GIMXMA, \n  ZMGART00F.FIMAMA, \n  ZMGART00F.MGIMMA, \n  ZMGART00F.TPCOMA\nFROM ZMGART00F";

				globalMap.put("tAccessInput_1_QUERY", dbquery_tAccessInput_1);

				java.sql.ResultSet rs_tAccessInput_1 = null;
				try {
					rs_tAccessInput_1 = stmt_tAccessInput_1
							.executeQuery(dbquery_tAccessInput_1);
					java.sql.ResultSetMetaData rsmd_tAccessInput_1 = rs_tAccessInput_1
							.getMetaData();
					int colQtyInRs_tAccessInput_1 = rsmd_tAccessInput_1
							.getColumnCount();

					String tmpContent_tAccessInput_1 = null;

					while (rs_tAccessInput_1.next()) {
						nb_line_tAccessInput_1++;

						if (colQtyInRs_tAccessInput_1 < 1) {
							row1.TIREMA = null;
						} else {

							row1.TIREMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 1, false);
						}
						if (colQtyInRs_tAccessInput_1 < 2) {
							row1.PROFMA = null;
						} else {

							row1.PROFMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 2, false);
						}
						if (colQtyInRs_tAccessInput_1 < 3) {
							row1.DT01MA = null;
						} else {

							row1.DT01MA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 3, false);
						}
						if (colQtyInRs_tAccessInput_1 < 4) {
							row1.DTMNMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(4) != null) {
								row1.DTMNMA = rs_tAccessInput_1.getFloat(4);
							} else {
								row1.DTMNMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 5) {
							row1.CDDTMA = null;
						} else {

							row1.CDDTMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 5, false);
						}
						if (colQtyInRs_tAccessInput_1 < 6) {
							row1.CDARMA = null;
						} else {

							row1.CDARMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 6, false);
						}
						if (colQtyInRs_tAccessInput_1 < 7) {
							row1.SIGLMA = null;
						} else {

							row1.SIGLMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 7, false);
						}
						if (colQtyInRs_tAccessInput_1 < 8) {
							row1.DSARMA = null;
						} else {

							row1.DSARMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 8, false);
						}
						if (colQtyInRs_tAccessInput_1 < 9) {
							row1.DSSAMA = null;
						} else {

							row1.DSSAMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 9, false);
						}
						if (colQtyInRs_tAccessInput_1 < 10) {
							row1.UMBAMA = null;
						} else {

							row1.UMBAMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 10, false);
						}
						if (colQtyInRs_tAccessInput_1 < 11) {
							row1.UMALMA = null;
						} else {

							row1.UMALMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 11, false);
						}
						if (colQtyInRs_tAccessInput_1 < 12) {
							row1.COEFMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(12) != null) {
								row1.COEFMA = rs_tAccessInput_1.getFloat(12);
							} else {
								row1.COEFMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 13) {
							row1.FOABMA = null;
						} else {

							row1.FOABMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 13, false);
						}
						if (colQtyInRs_tAccessInput_1 < 14) {
							row1.CSBCMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(14) != null) {
								row1.CSBCMA = rs_tAccessInput_1.getFloat(14);
							} else {
								row1.CSBCMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 15) {
							row1.CSBAMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(15) != null) {
								row1.CSBAMA = rs_tAccessInput_1.getFloat(15);
							} else {
								row1.CSBAMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 16) {
							row1.PRZBMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(16) != null) {
								row1.PRZBMA = rs_tAccessInput_1.getFloat(16);
							} else {
								row1.PRZBMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 17) {
							row1.CSBCMA2 = null;
						} else {

							if (rs_tAccessInput_1.getObject(17) != null) {
								row1.CSBCMA2 = rs_tAccessInput_1.getFloat(17);
							} else {
								row1.CSBCMA2 = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 18) {
							row1.CSBAMA2 = null;
						} else {

							if (rs_tAccessInput_1.getObject(18) != null) {
								row1.CSBAMA2 = rs_tAccessInput_1.getFloat(18);
							} else {
								row1.CSBAMA2 = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 19) {
							row1.PRZBMA2 = null;
						} else {

							if (rs_tAccessInput_1.getObject(19) != null) {
								row1.PRZBMA2 = rs_tAccessInput_1.getFloat(19);
							} else {
								row1.PRZBMA2 = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 20) {
							row1.SCOBMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(20) != null) {
								row1.SCOBMA = rs_tAccessInput_1.getFloat(20);
							} else {
								row1.SCOBMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 21) {
							row1.ALIVMA = null;
						} else {

							row1.ALIVMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 21, false);
						}
						if (colQtyInRs_tAccessInput_1 < 22) {
							row1.PRAGMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(22) != null) {
								row1.PRAGMA = rs_tAccessInput_1.getFloat(22);
							} else {
								row1.PRAGMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 23) {
							row1.CLA1MA = null;
						} else {

							row1.CLA1MA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 23, false);
						}
						if (colQtyInRs_tAccessInput_1 < 24) {
							row1.CLA2MA = null;
						} else {

							row1.CLA2MA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 24, false);
						}
						if (colQtyInRs_tAccessInput_1 < 25) {
							row1.CLA3MA = null;
						} else {

							row1.CLA3MA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 25, false);
						}
						if (colQtyInRs_tAccessInput_1 < 26) {
							row1.CLA4MA = null;
						} else {

							row1.CLA4MA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 26, false);
						}
						if (colQtyInRs_tAccessInput_1 < 27) {
							row1.CLA5MA = null;
						} else {

							row1.CLA5MA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 27, false);
						}
						if (colQtyInRs_tAccessInput_1 < 28) {
							row1.PEUNMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(28) != null) {
								row1.PEUNMA = rs_tAccessInput_1.getFloat(28);
							} else {
								row1.PEUNMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 29) {
							row1.PEULMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(29) != null) {
								row1.PEULMA = rs_tAccessInput_1.getFloat(29);
							} else {
								row1.PEULMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 30) {
							row1.RGFIMA = null;
						} else {

							row1.RGFIMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 30, false);
						}
						if (colQtyInRs_tAccessInput_1 < 31) {
							row1.TPSTMA = null;
						} else {

							row1.TPSTMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 31, false);
						}
						if (colQtyInRs_tAccessInput_1 < 32) {
							row1.VOUNMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(32) != null) {
								row1.VOUNMA = rs_tAccessInput_1.getFloat(32);
							} else {
								row1.VOUNMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 33) {
							row1.TMAPMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(33) != null) {
								row1.TMAPMA = rs_tAccessInput_1.getFloat(33);
							} else {
								row1.TMAPMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 34) {
							row1.QPOGMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(34) != null) {
								row1.QPOGMA = rs_tAccessInput_1.getFloat(34);
							} else {
								row1.QPOGMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 35) {
							row1.GGCOMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(35) != null) {
								row1.GGCOMA = rs_tAccessInput_1.getFloat(35);
							} else {
								row1.GGCOMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 36) {
							row1.PCCAMA = null;
						} else {

							row1.PCCAMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 36, false);
						}
						if (colQtyInRs_tAccessInput_1 < 37) {
							row1.CFCAMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(37) != null) {
								row1.CFCAMA = rs_tAccessInput_1.getFloat(37);
							} else {
								row1.CFCAMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 38) {
							row1.CABCMA = null;
						} else {

							row1.CABCMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 38, false);
						}
						if (colQtyInRs_tAccessInput_1 < 39) {
							row1.LIPIMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(39) != null) {
								row1.LIPIMA = rs_tAccessInput_1.getFloat(39);
							} else {
								row1.LIPIMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 40) {
							row1.CDMPMA = null;
						} else {

							row1.CDMPMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 40, false);
						}
						if (colQtyInRs_tAccessInput_1 < 41) {
							row1.CDPRMA = null;
						} else {

							row1.CDPRMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 41, false);
						}
						if (colQtyInRs_tAccessInput_1 < 42) {
							row1.CLINMA = null;
						} else {

							row1.CLINMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 42, false);
						}
						if (colQtyInRs_tAccessInput_1 < 43) {
							row1.PRIEMA = null;
						} else {

							row1.PRIEMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 43, false);
						}
						if (colQtyInRs_tAccessInput_1 < 44) {
							row1.CDALMA = null;
						} else {

							row1.CDALMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 44, false);
						}
						if (colQtyInRs_tAccessInput_1 < 45) {
							row1.COALMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(45) != null) {
								row1.COALMA = rs_tAccessInput_1.getFloat(45);
							} else {
								row1.COALMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 46) {
							row1.INPRMA = null;
						} else {

							row1.INPRMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 46, false);
						}
						if (colQtyInRs_tAccessInput_1 < 47) {
							row1.LORIMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(47) != null) {
								row1.LORIMA = rs_tAccessInput_1.getFloat(47);
							} else {
								row1.LORIMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 48) {
							row1.LOMUMA = null;
						} else {

							row1.LOMUMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 48, false);
						}
						if (colQtyInRs_tAccessInput_1 < 49) {
							row1.PURIMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(49) != null) {
								row1.PURIMA = rs_tAccessInput_1.getFloat(49);
							} else {
								row1.PURIMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 50) {
							row1.SSICMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(50) != null) {
								row1.SSICMA = rs_tAccessInput_1.getFloat(50);
							} else {
								row1.SSICMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 51) {
							row1.UBMAMA = null;
						} else {

							row1.UBMAMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 51, false);
						}
						if (colQtyInRs_tAccessInput_1 < 52) {
							row1.SIGPMA = null;
						} else {

							row1.SIGPMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 52, false);
						}
						if (colQtyInRs_tAccessInput_1 < 53) {
							row1.LVMIMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(53) != null) {
								row1.LVMIMA = rs_tAccessInput_1.getFloat(53);
							} else {
								row1.LVMIMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 54) {
							row1.PCSCMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(54) != null) {
								row1.PCSCMA = rs_tAccessInput_1.getFloat(54);
							} else {
								row1.PCSCMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 55) {
							row1.TMACMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(55) != null) {
								row1.TMACMA = rs_tAccessInput_1.getFloat(55);
							} else {
								row1.TMACMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 56) {
							row1.INDMMA = null;
						} else {

							row1.INDMMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 56, false);
						}
						if (colQtyInRs_tAccessInput_1 < 57) {
							row1.LOMIMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(57) != null) {
								row1.LOMIMA = rs_tAccessInput_1.getFloat(57);
							} else {
								row1.LOMIMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 58) {
							row1.CDNAMA = null;
						} else {

							row1.CDNAMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 58, false);
						}
						if (colQtyInRs_tAccessInput_1 < 59) {
							row1.FLRMMA = null;
						} else {

							row1.FLRMMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 59, false);
						}
						if (colQtyInRs_tAccessInput_1 < 60) {
							row1.FLNEMA = null;
						} else {

							row1.FLNEMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 60, false);
						}
						if (colQtyInRs_tAccessInput_1 < 61) {
							row1.STATMA = null;
						} else {

							row1.STATMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 61, false);
						}
						if (colQtyInRs_tAccessInput_1 < 62) {
							row1.FLPEMA = null;
						} else {

							row1.FLPEMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 62, false);
						}
						if (colQtyInRs_tAccessInput_1 < 63) {
							row1.FLMPMA = null;
						} else {

							row1.FLMPMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 63, false);
						}
						if (colQtyInRs_tAccessInput_1 < 64) {
							row1.FLFAMA = null;
						} else {

							row1.FLFAMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 64, false);
						}
						if (colQtyInRs_tAccessInput_1 < 65) {
							row1.FLCQMA = null;
						} else {

							row1.FLCQMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 65, false);
						}
						if (colQtyInRs_tAccessInput_1 < 66) {
							row1.GANVMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(66) != null) {
								row1.GANVMA = rs_tAccessInput_1.getFloat(66);
							} else {
								row1.GANVMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 67) {
							row1.GIMXMA = null;
						} else {

							if (rs_tAccessInput_1.getObject(67) != null) {
								row1.GIMXMA = rs_tAccessInput_1.getFloat(67);
							} else {
								row1.GIMXMA = null;
							}
						}
						if (colQtyInRs_tAccessInput_1 < 68) {
							row1.FIMAMA = null;
						} else {

							row1.FIMAMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 68, false);
						}
						if (colQtyInRs_tAccessInput_1 < 69) {
							row1.MGIMMA = null;
						} else {

							row1.MGIMMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 69, false);
						}
						if (colQtyInRs_tAccessInput_1 < 70) {
							row1.TPCOMA = null;
						} else {

							row1.TPCOMA = routines.system.JDBCUtil.getString(
									rs_tAccessInput_1, 70, false);
						}

						/**
						 * [tAccessInput_1 begin ] stop
						 */

						/**
						 * [tAccessInput_1 main ] start
						 */

						currentComponent = "tAccessInput_1";

						tos_count_tAccessInput_1++;

						/**
						 * [tAccessInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.UMFROM = row1.UMBAMA;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.UMFROM = '"
							// + row2HashKey.UMFROM + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;
							Var.var1 = Numeric.sequence("s1", 1000000, 1);// ###############################
							// ###############################
							// # Output tables

							insert_i_product = null;

							// # Output table : 'insert_i_product'
							insert_i_product_tmp.i_product_id = Var.var1;
							insert_i_product_tmp.ad_client_id = 1000001.00;
							insert_i_product_tmp.ad_org_id = 0.00;
							insert_i_product_tmp.isactive = "Y";
							insert_i_product_tmp.created = TalendDate
									.getCurrentDate();
							insert_i_product_tmp.createdby = 100.00;
							insert_i_product_tmp.updated = TalendDate
									.getCurrentDate();
							insert_i_product_tmp.updatedby = 100.00;
							insert_i_product_tmp.i_isimported = "N";
							insert_i_product_tmp.i_errormsg = null;
							insert_i_product_tmp.m_product_id = null;
							insert_i_product_tmp.value = StringHandling
									.BTRIM(row1.CDARMA);
							insert_i_product_tmp.name = row1.SIGLMA;
							insert_i_product_tmp.description = StringHandling
									.BTRIM(row1.DSARMA);
							insert_i_product_tmp.documentnote = null;
							insert_i_product_tmp.help = row1.DSSAMA;
							insert_i_product_tmp.upc = null;
							insert_i_product_tmp.sku = row1.CDARMA;
							insert_i_product_tmp.x12de355 = row2.UMTO;
							insert_i_product_tmp.c_uom_id = null;
							insert_i_product_tmp.productcategory_value = "Standard";
							insert_i_product_tmp.m_product_category_id = null;
							insert_i_product_tmp.producttype = "I";
							insert_i_product_tmp.classification = null;
							insert_i_product_tmp.volume = null;
							insert_i_product_tmp.weight = null;
							insert_i_product_tmp.shelfwidth = null;
							insert_i_product_tmp.shelfheight = null;
							insert_i_product_tmp.shelfdepth = null;
							insert_i_product_tmp.unitsperpallet = null;
							insert_i_product_tmp.discontinued = "N";
							insert_i_product_tmp.discontinuedby = null;
							insert_i_product_tmp.imageurl = null;
							insert_i_product_tmp.descriptionurl = null;
							insert_i_product_tmp.bpartner_value = null;
							insert_i_product_tmp.c_bpartner_id = null;
							insert_i_product_tmp.iso_code = null;
							insert_i_product_tmp.c_currency_id = null;
							insert_i_product_tmp.pricelist = null;
							insert_i_product_tmp.pricepo = null;
							insert_i_product_tmp.royaltyamt = null;
							insert_i_product_tmp.priceeffective = null;
							insert_i_product_tmp.vendorproductno = null;
							insert_i_product_tmp.vendorcategory = null;
							insert_i_product_tmp.manufacturer = null;
							insert_i_product_tmp.order_min = null;
							insert_i_product_tmp.order_pack = null;
							insert_i_product_tmp.costperorder = null;
							insert_i_product_tmp.deliverytime_promised = null;
							insert_i_product_tmp.processing = "N";
							insert_i_product_tmp.processed = "N";
							insert_i_product_tmp.pricestd = null;
							insert_i_product_tmp.pricelimit = null;
							insert_i_product_tmp.discontinuedat = null;
							insert_i_product_tmp.i_product_uu = Var.var1;
							insert_i_product = insert_i_product_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "insert_i_product"
						if (insert_i_product != null) {

							/**
							 * [tPostgresqlOutput_1 main ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							// insert_i_product
							// insert_i_product

							if (execStat) {
								runStat.updateStatOnConnection(
										"insert_i_product" + iterateId, 1, 1);
							}

							whetherReject_tPostgresqlOutput_1 = false;
							pstmt_tPostgresqlOutput_1.setDouble(1,
									insert_i_product.i_product_id);

							java.sql.ResultSet rs_tPostgresqlOutput_1 = pstmt_tPostgresqlOutput_1
									.executeQuery();
							int checkCount_tPostgresqlOutput_1 = -1;
							while (rs_tPostgresqlOutput_1.next()) {
								checkCount_tPostgresqlOutput_1 = rs_tPostgresqlOutput_1
										.getInt(1);
							}
							if (checkCount_tPostgresqlOutput_1 > 0) {
								if (insert_i_product.ad_client_id == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(1,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											1, insert_i_product.ad_client_id);
								}

								if (insert_i_product.ad_org_id == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(2,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											2, insert_i_product.ad_org_id);
								}

								if (insert_i_product.isactive == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											3, insert_i_product.isactive);
								}

								if (insert_i_product.created != null) {
									pstmtUpdate_tPostgresqlOutput_1
											.setTimestamp(
													4,
													new java.sql.Timestamp(
															insert_i_product.created
																	.getTime()));
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setNull(4,
											java.sql.Types.TIMESTAMP);
								}

								if (insert_i_product.createdby == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(5,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											5, insert_i_product.createdby);
								}

								if (insert_i_product.updated != null) {
									pstmtUpdate_tPostgresqlOutput_1
											.setTimestamp(
													6,
													new java.sql.Timestamp(
															insert_i_product.updated
																	.getTime()));
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setNull(6,
											java.sql.Types.TIMESTAMP);
								}

								if (insert_i_product.updatedby == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(7,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											7, insert_i_product.updatedby);
								}

								if (insert_i_product.i_isimported == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											8, insert_i_product.i_isimported);
								}

								if (insert_i_product.i_errormsg == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											9, insert_i_product.i_errormsg);
								}

								if (insert_i_product.m_product_id == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(10,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											10, insert_i_product.m_product_id);
								}

								if (insert_i_product.value == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(11,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											11, insert_i_product.value);
								}

								if (insert_i_product.name == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(12,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											12, insert_i_product.name);
								}

								if (insert_i_product.description == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(13,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											13, insert_i_product.description);
								}

								if (insert_i_product.documentnote == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(14,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											14, insert_i_product.documentnote);
								}

								if (insert_i_product.help == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(15,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											15, insert_i_product.help);
								}

								if (insert_i_product.upc == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(16,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											16, insert_i_product.upc);
								}

								if (insert_i_product.sku == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(17,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											17, insert_i_product.sku);
								}

								if (insert_i_product.x12de355 == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(18,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											18, insert_i_product.x12de355);
								}

								if (insert_i_product.c_uom_id == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(19,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											19, insert_i_product.c_uom_id);
								}

								if (insert_i_product.productcategory_value == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(20,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1
											.setString(
													20,
													insert_i_product.productcategory_value);
								}

								if (insert_i_product.m_product_category_id == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(21,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1
											.setDouble(
													21,
													insert_i_product.m_product_category_id);
								}

								if (insert_i_product.producttype == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(22,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											22, insert_i_product.producttype);
								}

								if (insert_i_product.classification == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(23,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1
											.setString(
													23,
													insert_i_product.classification);
								}

								if (insert_i_product.volume == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(24,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											24, insert_i_product.volume);
								}

								if (insert_i_product.weight == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(25,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											25, insert_i_product.weight);
								}

								if (insert_i_product.shelfwidth == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(26,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											26, insert_i_product.shelfwidth);
								}

								if (insert_i_product.shelfheight == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(27,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											27, insert_i_product.shelfheight);
								}

								if (insert_i_product.shelfdepth == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(28,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											28, insert_i_product.shelfdepth);
								}

								if (insert_i_product.unitsperpallet == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(29,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1
											.setDouble(
													29,
													insert_i_product.unitsperpallet);
								}

								if (insert_i_product.discontinued == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(30,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											30, insert_i_product.discontinued);
								}

								if (insert_i_product.discontinuedby != null) {
									pstmtUpdate_tPostgresqlOutput_1
											.setTimestamp(
													31,
													new java.sql.Timestamp(
															insert_i_product.discontinuedby
																	.getTime()));
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setNull(31,
											java.sql.Types.TIMESTAMP);
								}

								if (insert_i_product.imageurl == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(32,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											32, insert_i_product.imageurl);
								}

								if (insert_i_product.descriptionurl == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(33,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1
											.setString(
													33,
													insert_i_product.descriptionurl);
								}

								if (insert_i_product.bpartner_value == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(34,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1
											.setString(
													34,
													insert_i_product.bpartner_value);
								}

								if (insert_i_product.c_bpartner_id == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(35,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											35, insert_i_product.c_bpartner_id);
								}

								if (insert_i_product.iso_code == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(36,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											36, insert_i_product.iso_code);
								}

								if (insert_i_product.c_currency_id == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(37,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											37, insert_i_product.c_currency_id);
								}

								if (insert_i_product.pricelist == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(38,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											38, insert_i_product.pricelist);
								}

								if (insert_i_product.pricepo == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(39,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											39, insert_i_product.pricepo);
								}

								if (insert_i_product.royaltyamt == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(40,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											40, insert_i_product.royaltyamt);
								}

								if (insert_i_product.priceeffective != null) {
									pstmtUpdate_tPostgresqlOutput_1
											.setTimestamp(
													41,
													new java.sql.Timestamp(
															insert_i_product.priceeffective
																	.getTime()));
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setNull(41,
											java.sql.Types.TIMESTAMP);
								}

								if (insert_i_product.vendorproductno == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(42,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											42,
											insert_i_product.vendorproductno);
								}

								if (insert_i_product.vendorcategory == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(43,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1
											.setString(
													43,
													insert_i_product.vendorcategory);
								}

								if (insert_i_product.manufacturer == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(44,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											44, insert_i_product.manufacturer);
								}

								if (insert_i_product.order_min == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(45,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											45, insert_i_product.order_min);
								}

								if (insert_i_product.order_pack == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(46,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											46, insert_i_product.order_pack);
								}

								if (insert_i_product.costperorder == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(47,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											47, insert_i_product.costperorder);
								}

								if (insert_i_product.deliverytime_promised == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(48,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1
											.setDouble(
													48,
													insert_i_product.deliverytime_promised);
								}

								if (insert_i_product.processing == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(49,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											49, insert_i_product.processing);
								}

								if (insert_i_product.processed == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(50,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											50, insert_i_product.processed);
								}

								if (insert_i_product.pricestd == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(51,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											51, insert_i_product.pricestd);
								}

								if (insert_i_product.pricelimit == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(52,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											52, insert_i_product.pricelimit);
								}

								if (insert_i_product.discontinuedat != null) {
									pstmtUpdate_tPostgresqlOutput_1
											.setTimestamp(
													53,
													new java.sql.Timestamp(
															insert_i_product.discontinuedat
																	.getTime()));
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setNull(53,
											java.sql.Types.TIMESTAMP);
								}

								if (insert_i_product.i_product_uu == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(54,
											java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setDouble(
											54, insert_i_product.i_product_uu);
								}

								pstmtUpdate_tPostgresqlOutput_1.setDouble(
										55 + count_tPostgresqlOutput_1,
										insert_i_product.i_product_id);

								try {

									updatedCount_tPostgresqlOutput_1 = updatedCount_tPostgresqlOutput_1
											+ pstmtUpdate_tPostgresqlOutput_1
													.executeUpdate();
									nb_line_tPostgresqlOutput_1++;

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_1 = true;
									nb_line_tPostgresqlOutput_1++;
									System.err.print(e.getMessage());
								}
							} else {
								pstmtInsert_tPostgresqlOutput_1.setDouble(1,
										insert_i_product.i_product_id);

								if (insert_i_product.ad_client_id == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(2,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											2, insert_i_product.ad_client_id);
								}

								if (insert_i_product.ad_org_id == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(3,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											3, insert_i_product.ad_org_id);
								}

								if (insert_i_product.isactive == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											4, insert_i_product.isactive);
								}

								if (insert_i_product.created != null) {
									pstmtInsert_tPostgresqlOutput_1
											.setTimestamp(
													5,
													new java.sql.Timestamp(
															insert_i_product.created
																	.getTime()));
								} else {
									pstmtInsert_tPostgresqlOutput_1.setNull(5,
											java.sql.Types.TIMESTAMP);
								}

								if (insert_i_product.createdby == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(6,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											6, insert_i_product.createdby);
								}

								if (insert_i_product.updated != null) {
									pstmtInsert_tPostgresqlOutput_1
											.setTimestamp(
													7,
													new java.sql.Timestamp(
															insert_i_product.updated
																	.getTime()));
								} else {
									pstmtInsert_tPostgresqlOutput_1.setNull(7,
											java.sql.Types.TIMESTAMP);
								}

								if (insert_i_product.updatedby == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(8,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											8, insert_i_product.updatedby);
								}

								if (insert_i_product.i_isimported == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											9, insert_i_product.i_isimported);
								}

								if (insert_i_product.i_errormsg == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(10,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											10, insert_i_product.i_errormsg);
								}

								if (insert_i_product.m_product_id == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(11,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											11, insert_i_product.m_product_id);
								}

								if (insert_i_product.value == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(12,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											12, insert_i_product.value);
								}

								if (insert_i_product.name == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(13,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											13, insert_i_product.name);
								}

								if (insert_i_product.description == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(14,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											14, insert_i_product.description);
								}

								if (insert_i_product.documentnote == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(15,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											15, insert_i_product.documentnote);
								}

								if (insert_i_product.help == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(16,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											16, insert_i_product.help);
								}

								if (insert_i_product.upc == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(17,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											17, insert_i_product.upc);
								}

								if (insert_i_product.sku == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(18,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											18, insert_i_product.sku);
								}

								if (insert_i_product.x12de355 == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(19,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											19, insert_i_product.x12de355);
								}

								if (insert_i_product.c_uom_id == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(20,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											20, insert_i_product.c_uom_id);
								}

								if (insert_i_product.productcategory_value == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(21,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1
											.setString(
													21,
													insert_i_product.productcategory_value);
								}

								if (insert_i_product.m_product_category_id == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(22,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1
											.setDouble(
													22,
													insert_i_product.m_product_category_id);
								}

								if (insert_i_product.producttype == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(23,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											23, insert_i_product.producttype);
								}

								if (insert_i_product.classification == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(24,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1
											.setString(
													24,
													insert_i_product.classification);
								}

								if (insert_i_product.volume == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(25,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											25, insert_i_product.volume);
								}

								if (insert_i_product.weight == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(26,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											26, insert_i_product.weight);
								}

								if (insert_i_product.shelfwidth == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(27,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											27, insert_i_product.shelfwidth);
								}

								if (insert_i_product.shelfheight == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(28,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											28, insert_i_product.shelfheight);
								}

								if (insert_i_product.shelfdepth == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(29,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											29, insert_i_product.shelfdepth);
								}

								if (insert_i_product.unitsperpallet == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(30,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1
											.setDouble(
													30,
													insert_i_product.unitsperpallet);
								}

								if (insert_i_product.discontinued == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(31,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											31, insert_i_product.discontinued);
								}

								if (insert_i_product.discontinuedby != null) {
									pstmtInsert_tPostgresqlOutput_1
											.setTimestamp(
													32,
													new java.sql.Timestamp(
															insert_i_product.discontinuedby
																	.getTime()));
								} else {
									pstmtInsert_tPostgresqlOutput_1.setNull(32,
											java.sql.Types.TIMESTAMP);
								}

								if (insert_i_product.imageurl == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(33,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											33, insert_i_product.imageurl);
								}

								if (insert_i_product.descriptionurl == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(34,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1
											.setString(
													34,
													insert_i_product.descriptionurl);
								}

								if (insert_i_product.bpartner_value == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(35,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1
											.setString(
													35,
													insert_i_product.bpartner_value);
								}

								if (insert_i_product.c_bpartner_id == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(36,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											36, insert_i_product.c_bpartner_id);
								}

								if (insert_i_product.iso_code == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(37,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											37, insert_i_product.iso_code);
								}

								if (insert_i_product.c_currency_id == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(38,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											38, insert_i_product.c_currency_id);
								}

								if (insert_i_product.pricelist == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(39,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											39, insert_i_product.pricelist);
								}

								if (insert_i_product.pricepo == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(40,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											40, insert_i_product.pricepo);
								}

								if (insert_i_product.royaltyamt == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(41,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											41, insert_i_product.royaltyamt);
								}

								if (insert_i_product.priceeffective != null) {
									pstmtInsert_tPostgresqlOutput_1
											.setTimestamp(
													42,
													new java.sql.Timestamp(
															insert_i_product.priceeffective
																	.getTime()));
								} else {
									pstmtInsert_tPostgresqlOutput_1.setNull(42,
											java.sql.Types.TIMESTAMP);
								}

								if (insert_i_product.vendorproductno == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(43,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											43,
											insert_i_product.vendorproductno);
								}

								if (insert_i_product.vendorcategory == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(44,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1
											.setString(
													44,
													insert_i_product.vendorcategory);
								}

								if (insert_i_product.manufacturer == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(45,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											45, insert_i_product.manufacturer);
								}

								if (insert_i_product.order_min == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(46,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											46, insert_i_product.order_min);
								}

								if (insert_i_product.order_pack == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(47,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											47, insert_i_product.order_pack);
								}

								if (insert_i_product.costperorder == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(48,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											48, insert_i_product.costperorder);
								}

								if (insert_i_product.deliverytime_promised == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(49,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1
											.setDouble(
													49,
													insert_i_product.deliverytime_promised);
								}

								if (insert_i_product.processing == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(50,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											50, insert_i_product.processing);
								}

								if (insert_i_product.processed == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(51,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											51, insert_i_product.processed);
								}

								if (insert_i_product.pricestd == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(52,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											52, insert_i_product.pricestd);
								}

								if (insert_i_product.pricelimit == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(53,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											53, insert_i_product.pricelimit);
								}

								if (insert_i_product.discontinuedat != null) {
									pstmtInsert_tPostgresqlOutput_1
											.setTimestamp(
													54,
													new java.sql.Timestamp(
															insert_i_product.discontinuedat
																	.getTime()));
								} else {
									pstmtInsert_tPostgresqlOutput_1.setNull(54,
											java.sql.Types.TIMESTAMP);
								}

								if (insert_i_product.i_product_uu == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(55,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setDouble(
											55, insert_i_product.i_product_uu);
								}

								try {

									insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
											+ pstmtInsert_tPostgresqlOutput_1
													.executeUpdate();
									nb_line_tPostgresqlOutput_1++;

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_1 = true;
									nb_line_tPostgresqlOutput_1++;
									System.err.print(e.getMessage());
								}
							}
							commitCounter_tPostgresqlOutput_1++;
							if (commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
								conn_tPostgresqlOutput_1.commit();

								commitCounter_tPostgresqlOutput_1 = 0;
							}

							tos_count_tPostgresqlOutput_1++;

							/**
							 * [tPostgresqlOutput_1 main ] stop
							 */

						} // End of branch "insert_i_product"

						/**
						 * [tAccessInput_1 end ] start
						 */

						currentComponent = "tAccessInput_1";

					}
				} finally {
					stmt_tAccessInput_1.close();

					if (conn_tAccessInput_1 != null
							&& !conn_tAccessInput_1.isClosed()) {

						conn_tAccessInput_1.close();

					}
				}
				globalMap.put("tAccessInput_1_NB_LINE", nb_line_tAccessInput_1);

				ok_Hash.put("tAccessInput_1", true);
				end_Hash.put("tAccessInput_1", System.currentTimeMillis());

				/**
				 * [tAccessInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmtUpdate_tPostgresqlOutput_1 != null) {
					pstmtUpdate_tPostgresqlOutput_1.close();
				}
				if (pstmtInsert_tPostgresqlOutput_1 != null) {
					pstmtInsert_tPostgresqlOutput_1.close();
				}
				if (pstmt_tPostgresqlOutput_1 != null) {
					pstmt_tPostgresqlOutput_1.close();
				}

				conn_tPostgresqlOutput_1.commit();

				conn_tPostgresqlOutput_1.close();

				resourceMap.put("finish_tPostgresqlOutput_1", true);

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("insert_i_product"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tAccessInput_1 finally ] start
				 */

				currentComponent = "tAccessInput_1";

				/**
				 * [tAccessInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (resourceMap.get("finish_tPostgresqlOutput_1") == null) {
					if (resourceMap.get("conn_tPostgresqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tPostgresqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
							String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :"
									+ sqlEx_tPostgresqlOutput_1.getMessage();

							System.err
									.println(errorMessage_tPostgresqlOutput_1);
						}
					}
				}

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAccessInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_GToI_ImportProduct = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String UMFROM;

		public String getUMFROM() {
			return this.UMFROM;
		}

		public String UMTO;

		public String getUMTO() {
			return this.UMTO;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.UMFROM == null) ? 0 : this.UMFROM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.UMFROM == null) {
				if (other.UMFROM != null)
					return false;

			} else if (!this.UMFROM.equals(other.UMFROM))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.UMFROM = this.UMFROM;
			other.UMTO = this.UMTO;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.UMFROM = this.UMFROM;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_GToI_ImportProduct.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_GToI_ImportProduct.length == 0) {
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_GToI_ImportProduct,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_GToI_ImportProduct, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_GToI_ImportProduct) {

				try {

					int length = 0;

					this.UMFROM = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.UMFROM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.UMTO = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.UMTO, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("UMFROM=" + UMFROM);
			sb.append(",UMTO=" + UMTO);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.UMFROM, other.UMFROM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tFileInputExcel_1 - inputs:(after_tAccessInput_1)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2)
				// outputs:(insert_i_product)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							String oneSheetName, boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (org.apache.poi.xssf.usermodel.XSSFSheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = "/progtalend/CONV_UM.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(String) source_tFileInputExcel_1);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(java.io.InputStream) source_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1) {
						sheetList_tFileInputExcel_1
								.add(sheet_tFileInputExcel_1);
					}
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1
										.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1
										.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1
									.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1
									.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1
								.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1
									&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1
									+ currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1
										.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET",
									sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1
												- rowCount_tFileInputExcel_1);
							}
							row2 = null;
							row2 = null;
							int tempRowLength_tFileInputExcel_1 = 2;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1
										.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i
													+ start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1
												.getCellType()) {
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue()
													.getString();
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue()
														.toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1
																.getNumericCellValue());
											}
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1
															.getBooleanCellValue());
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
											switch (cell_tFileInputExcel_1
													.getCachedFormulaResultType()) {
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue()
														.getString();
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue()
															.toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1
																	.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1
																.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							row2 = new row2Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "UMFROM";

									row2.UMFROM = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row2.UMFROM = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "UMTO";

									row2.UMTO = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row2.UMTO = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row2 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tAdvancedHash_row2 main ] start
								 */

								currentComponent = "tAdvancedHash_row2";

								// row2
								// row2

								if (execStat) {
									runStat.updateStatOnConnection("row2"
											+ iterateId, 1, 1);
								}

								row2Struct row2_HashRow = new row2Struct();

								row2_HashRow.UMFROM = row2.UMFROM;

								row2_HashRow.UMTO = row2.UMTO;

								tHash_Lookup_row2.put(row2_HashRow);

								tos_count_tAdvancedHash_row2++;

								/**
								 * [tAdvancedHash_row2 main ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE",
								nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final GToI_ImportProduct GToI_ImportProductClass = new GToI_ImportProduct();

		int exitCode = GToI_ImportProductClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = GToI_ImportProduct.class
					.getClassLoader().getResourceAsStream(
							"local_project/gtoi_importproduct_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tAccessInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tAccessInput_1) {
			globalMap.put("tAccessInput_1_SUBPROCESS_STATE", -1);

			e_tAccessInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : GToI_ImportProduct");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 198063 characters generated by Talend Open Studio for Data Integration on the
 * 16 giugno 2016 15.04.52 CEST
 ************************************************************************************************/
